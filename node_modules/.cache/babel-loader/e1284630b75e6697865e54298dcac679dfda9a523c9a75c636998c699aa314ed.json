{"ast":null,"code":"import { schemeCategory10 as e, schemeAccent as r, schemeDark2 as n, schemePaired as t, schemePastel1 as o, schemePastel2 as i, schemeSet1 as u, schemeSet2 as a, schemeSet3 as l, schemeBrBG as s, schemePRGn as c, schemePiYG as f, schemePuOr as p, schemeRdBu as d, schemeRdGy as m, schemeRdYlBu as h, schemeRdYlGn as g, schemeSpectral as y, interpolateBrBG as b, interpolatePRGn as v, interpolatePiYG as _, interpolatePuOr as w, interpolateRdBu as O, interpolateRdGy as k, interpolateRdYlBu as z, interpolateRdYlGn as A, interpolateSpectral as j, schemeBlues as E, schemeGreens as x, schemeGreys as I, schemeOranges as q, schemePurples as S, schemeReds as R, schemeBuGn as C, schemeBuPu as G, schemeGnBu as V, schemeOrRd as T, schemePuBuGn as P, schemePuBu as U, schemePuRd as D, schemeRdPu as M, schemeYlGnBu as $, schemeYlGn as B, schemeYlOrBr as F, schemeYlOrRd as H, interpolateBlues as J, interpolateGreens as K, interpolateGreys as L, interpolateOranges as N, interpolatePurples as Q, interpolateReds as W, interpolateTurbo as X, interpolateViridis as Y, interpolateInferno as Z, interpolateMagma as ee, interpolatePlasma as re, interpolateCividis as ne, interpolateWarm as te, interpolateCool as oe, interpolateCubehelixDefault as ie, interpolateBuGn as ue, interpolateBuPu as ae, interpolateGnBu as le, interpolateOrRd as se, interpolatePuBuGn as ce, interpolatePuBu as fe, interpolatePuRd as pe, interpolateRdPu as de, interpolateYlGnBu as me, interpolateYlGn as he, interpolateYlOrBr as ge, interpolateYlOrRd as ye, interpolateRainbow as be, interpolateSinebow as ve } from \"d3-scale-chromatic\";\nimport _e from \"lodash/isPlainObject\";\nimport we from \"lodash/get\";\nimport { useMemo as Oe } from \"react\";\nimport { rgb as ke } from \"d3-color\";\nimport ze from \"prop-types\";\nimport { scaleSequential as Ae, scaleDiverging as je, scaleQuantize as Ee, scaleLinear as xe, scaleOrdinal as Ie } from \"d3-scale\";\nfunction qe() {\n  return qe = Object.assign || function (e) {\n    for (var r = 1; r < arguments.length; r++) {\n      var n = arguments[r];\n      for (var t in n) Object.prototype.hasOwnProperty.call(n, t) && (e[t] = n[t]);\n    }\n    return e;\n  }, qe.apply(this, arguments);\n}\nfunction Se(e, r) {\n  (null == r || r > e.length) && (r = e.length);\n  for (var n = 0, t = new Array(r); n < r; n++) t[n] = e[n];\n  return t;\n}\nfunction Re(e, r) {\n  var n = \"undefined\" != typeof Symbol && e[Symbol.iterator] || e[\"@@iterator\"];\n  if (n) return (n = n.call(e)).next.bind(n);\n  if (Array.isArray(e) || (n = function (e, r) {\n    if (e) {\n      if (\"string\" == typeof e) return Se(e, r);\n      var n = Object.prototype.toString.call(e).slice(8, -1);\n      return \"Object\" === n && e.constructor && (n = e.constructor.name), \"Map\" === n || \"Set\" === n ? Array.from(e) : \"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? Se(e, r) : void 0;\n    }\n  }(e)) || r && e && \"number\" == typeof e.length) {\n    n && (e = n);\n    var t = 0;\n    return function () {\n      return t >= e.length ? {\n        done: !0\n      } : {\n        done: !1,\n        value: e[t++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar Ce = {\n    nivo: [\"#e8c1a0\", \"#f47560\", \"#f1e15b\", \"#e8a838\", \"#61cdbb\", \"#97e3d5\"],\n    category10: e,\n    accent: r,\n    dark2: n,\n    paired: t,\n    pastel1: o,\n    pastel2: i,\n    set1: u,\n    set2: a,\n    set3: l\n  },\n  Ge = Object.keys(Ce),\n  Ve = {\n    brown_blueGreen: s,\n    purpleRed_green: c,\n    pink_yellowGreen: f,\n    purple_orange: p,\n    red_blue: d,\n    red_grey: m,\n    red_yellow_blue: h,\n    red_yellow_green: g,\n    spectral: y\n  },\n  Te = Object.keys(Ve),\n  Pe = {\n    brown_blueGreen: b,\n    purpleRed_green: v,\n    pink_yellowGreen: _,\n    purple_orange: w,\n    red_blue: O,\n    red_grey: k,\n    red_yellow_blue: z,\n    red_yellow_green: A,\n    spectral: j\n  },\n  Ue = {\n    blues: E,\n    greens: x,\n    greys: I,\n    oranges: q,\n    purples: S,\n    reds: R,\n    blue_green: C,\n    blue_purple: G,\n    green_blue: V,\n    orange_red: T,\n    purple_blue_green: P,\n    purple_blue: U,\n    purple_red: D,\n    red_purple: M,\n    yellow_green_blue: $,\n    yellow_green: B,\n    yellow_orange_brown: F,\n    yellow_orange_red: H\n  },\n  De = Object.keys(Ue),\n  Me = {\n    blues: J,\n    greens: K,\n    greys: L,\n    oranges: N,\n    purples: Q,\n    reds: W,\n    turbo: X,\n    viridis: Y,\n    inferno: Z,\n    magma: ee,\n    plasma: re,\n    cividis: ne,\n    warm: te,\n    cool: oe,\n    cubehelixDefault: ie,\n    blue_green: ue,\n    blue_purple: ae,\n    green_blue: le,\n    orange_red: se,\n    purple_blue_green: ce,\n    purple_blue: fe,\n    purple_red: pe,\n    red_purple: de,\n    yellow_green_blue: me,\n    yellow_green: he,\n    yellow_orange_brown: ge,\n    yellow_orange_red: ye\n  },\n  $e = qe({}, Ce, Ve, Ue),\n  Be = Object.keys($e),\n  Fe = function (e) {\n    return Ge.includes(e);\n  },\n  He = function (e) {\n    return Te.includes(e);\n  },\n  Je = function (e) {\n    return De.includes(e);\n  },\n  Ke = {\n    rainbow: be,\n    sinebow: ve\n  },\n  Le = qe({}, Pe, Me, Ke),\n  Ne = Object.keys(Le),\n  Qe = function (e, r) {\n    if (\"function\" == typeof e) return e;\n    if (_e(e)) {\n      if (function (e) {\n        return void 0 !== e.theme;\n      }(e)) {\n        if (void 0 === r) throw new Error(\"Unable to use color from theme as no theme was provided\");\n        var n = we(r, e.theme);\n        if (void 0 === n) throw new Error(\"Color from theme is undefined at path: '\" + e.theme + \"'\");\n        return function () {\n          return n;\n        };\n      }\n      if (function (e) {\n        return void 0 !== e.from;\n      }(e)) {\n        var t = function (r) {\n          return we(r, e.from);\n        };\n        if (Array.isArray(e.modifiers)) {\n          for (var o, i = [], u = function () {\n              var e = o.value,\n                r = e[0],\n                n = e[1];\n              if (\"brighter\" === r) i.push(function (e) {\n                return e.brighter(n);\n              });else if (\"darker\" === r) i.push(function (e) {\n                return e.darker(n);\n              });else {\n                if (\"opacity\" !== r) throw new Error(\"Invalid color modifier: '\" + r + \"', must be one of: 'brighter', 'darker', 'opacity'\");\n                i.push(function (e) {\n                  return e.opacity = n, e;\n                });\n              }\n            }, a = Re(e.modifiers); !(o = a()).done;) u();\n          return 0 === i.length ? t : function (e) {\n            return i.reduce(function (e, r) {\n              return r(e);\n            }, ke(t(e))).toString();\n          };\n        }\n        return t;\n      }\n      throw new Error(\"Invalid color spec, you should either specify 'theme' or 'from' when using a config object\");\n    }\n    return function () {\n      return e;\n    };\n  },\n  We = function (e, r) {\n    return Oe(function () {\n      return Qe(e, r);\n    }, [e, r]);\n  },\n  Xe = ze.oneOfType([ze.func, ze.arrayOf(ze.string), ze.shape({\n    scheme: ze.oneOf(Be).isRequired,\n    size: ze.number\n  }), ze.shape({\n    datum: ze.string.isRequired\n  }), ze.string]),\n  Ye = ze.oneOfType([ze.string, ze.func, ze.shape({\n    theme: ze.string.isRequired\n  }), ze.shape({\n    from: ze.string.isRequired,\n    modifiers: ze.arrayOf(ze.array)\n  })]),\n  Ze = {\n    scheme: \"turbo\"\n  },\n  er = function (e, r) {\n    var n = e.minValue,\n      t = e.maxValue,\n      o = void 0 !== n ? n : r.min,\n      i = void 0 !== t ? t : r.max,\n      u = Ae().domain([o, i]).clamp(!0);\n    if (\"colors\" in e) u.range(e.colors);else if (\"interpolator\" in e) u.interpolator(e.interpolator);else {\n      var a,\n        l = null != (a = e.scheme) ? a : Ze.scheme;\n      u.interpolator(Le[l]);\n    }\n    return u;\n  },\n  rr = function (e, r) {\n    return Oe(function () {\n      return er(e, r);\n    }, [e, r]);\n  },\n  nr = {\n    scheme: \"red_yellow_blue\",\n    divergeAt: .5\n  },\n  tr = function (e, r) {\n    var n,\n      t = e.minValue,\n      o = e.maxValue,\n      i = void 0 !== t ? t : r.min,\n      u = void 0 !== o ? o : r.max,\n      a = [i, i + (u - i) / 2, u],\n      l = .5 - (null != (n = e.divergeAt) ? n : nr.divergeAt),\n      s = je().domain(a).clamp(!0),\n      c = function (e) {\n        return String(e);\n      };\n    if (\"colors\" in e) c = je().domain(a.map(function (e) {\n      return e - l * (u - i);\n    })).range(e.colors).interpolator();else if (\"interpolator\" in e) c = e.interpolator;else {\n      var f,\n        p = null != (f = e.scheme) ? f : nr.scheme;\n      c = Le[p];\n    }\n    return s.interpolator(function (e) {\n      return c(e + l);\n    });\n  },\n  or = function (e, r) {\n    return Oe(function () {\n      return tr(e, r);\n    }, [e, r]);\n  },\n  ir = {\n    scheme: \"turbo\",\n    steps: 7\n  },\n  ur = function (e, r) {\n    var n = Ee().domain(e.domain || [r.min, r.max]).nice();\n    if (\"colors\" in e) n.range(e.colors);else {\n      var t = e.scheme || ir.scheme,\n        o = void 0 === e.steps ? ir.steps : e.steps,\n        i = Le[t],\n        u = Array.from({\n          length: o\n        }).map(function (e, r) {\n          return i(r * (1 / (o - 1)));\n        });\n      n.range(u);\n    }\n    return n;\n  },\n  ar = function (e, r) {\n    return Oe(function () {\n      return ur(e, r);\n    }, [e, r]);\n  },\n  lr = function (e, r) {\n    if (function (e) {\n      return \"sequential\" === e.type;\n    }(e)) return er(e, r);\n    if (function (e) {\n      return \"diverging\" === e.type;\n    }(e)) return tr(e, r);\n    if (function (e) {\n      return \"quantize\" === e.type;\n    }(e)) return ur(e, r);\n    throw new Error(\"Invalid continuous color scale config\");\n  },\n  sr = function (e, r) {\n    return Oe(function () {\n      return lr(e, r);\n    }, [e, r]);\n  },\n  cr = function (e, r) {\n    void 0 === r && (r = 16);\n    var n = e.domain();\n    if (\"thresholds\" in e) {\n      var t = [],\n        o = xe().domain(n).range([0, 1]);\n      return e.range().forEach(function (r, n) {\n        var i = e.invertExtent(r),\n          u = i[0],\n          a = i[1];\n        t.push({\n          key: n + \".0\",\n          offset: o(u),\n          stopColor: r\n        }), t.push({\n          key: n + \".1\",\n          offset: o(a),\n          stopColor: r\n        });\n      }), t;\n    }\n    var i = e.copy();\n    return 2 === n.length ? i.domain([0, 1]) : 3 === n.length && i.domain([0, .5, 1]), i.ticks(r).map(function (e) {\n      return {\n        key: \"\" + e,\n        offset: e,\n        stopColor: \"\" + i(e)\n      };\n    });\n  },\n  fr = function (e, r) {\n    if (\"function\" == typeof e) return e;\n    var n = \"function\" == typeof r ? r : function (e) {\n      return we(e, r);\n    };\n    if (Array.isArray(e)) {\n      var t = Ie(e),\n        o = function (e) {\n          return t(n(e));\n        };\n      return o.scale = t, o;\n    }\n    if (_e(e)) {\n      if (function (e) {\n        return void 0 !== e.datum;\n      }(e)) return function (r) {\n        return we(r, e.datum);\n      };\n      if (function (e) {\n        return void 0 !== e.scheme;\n      }(e)) {\n        if (Fe(e.scheme)) {\n          var i = Ie($e[e.scheme]),\n            u = function (e) {\n              return i(n(e));\n            };\n          return u.scale = i, u;\n        }\n        if (He(e.scheme)) {\n          if (void 0 !== e.size && (e.size < 3 || e.size > 11)) throw new Error(\"Invalid size '\" + e.size + \"' for diverging color scheme '\" + e.scheme + \"', must be between 3~11\");\n          var a = Ie($e[e.scheme][e.size || 11]),\n            l = function (e) {\n              return a(n(e));\n            };\n          return l.scale = a, l;\n        }\n        if (Je(e.scheme)) {\n          if (void 0 !== e.size && (e.size < 3 || e.size > 9)) throw new Error(\"Invalid size '\" + e.size + \"' for sequential color scheme '\" + e.scheme + \"', must be between 3~9\");\n          var s = Ie($e[e.scheme][e.size || 9]),\n            c = function (e) {\n              return s(n(e));\n            };\n          return c.scale = s, c;\n        }\n      }\n      throw new Error(\"Invalid colors, when using an object, you should either pass a 'datum' or a 'scheme' property\");\n    }\n    return function () {\n      return e;\n    };\n  },\n  pr = function (e, r) {\n    return Oe(function () {\n      return fr(e, r);\n    }, [e, r]);\n  };\nexport { Ge as categoricalColorSchemeIds, Ce as categoricalColorSchemes, Ne as colorInterpolatorIds, Le as colorInterpolators, Be as colorSchemeIds, $e as colorSchemes, cr as computeContinuousColorScaleColorStops, Ke as cyclicalColorInterpolators, Pe as divergingColorInterpolators, nr as divergingColorScaleDefaults, Te as divergingColorSchemeIds, Ve as divergingColorSchemes, lr as getContinuousColorScale, tr as getDivergingColorScale, Qe as getInheritedColorGenerator, fr as getOrdinalColorScale, ur as getQuantizeColorScale, er as getSequentialColorScale, Ye as inheritedColorPropType, Fe as isCategoricalColorScheme, He as isDivergingColorScheme, Je as isSequentialColorScheme, Xe as ordinalColorsPropType, ir as quantizeColorScaleDefaults, Me as sequentialColorInterpolators, Ze as sequentialColorScaleDefaults, De as sequentialColorSchemeIds, Ue as sequentialColorSchemes, sr as useContinuousColorScale, or as useDivergingColorScale, We as useInheritedColor, pr as useOrdinalColorScale, ar as useQuantizeColorScale, rr as useSequentialColorScale };","map":{"version":3,"mappings":"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","names":["categoricalColorSchemes","nivo","category10","schemeCategory10","accent","schemeAccent","dark2","schemeDark2","paired","schemePaired","pastel1","schemePastel1","pastel2","schemePastel2","set1","schemeSet1","set2","schemeSet2","set3","schemeSet3","categoricalColorSchemeIds","Object","keys","divergingColorSchemes","brown_blueGreen","schemeBrBG","purpleRed_green","schemePRGn","pink_yellowGreen","schemePiYG","purple_orange","schemePuOr","red_blue","schemeRdBu","red_grey","schemeRdGy","red_yellow_blue","schemeRdYlBu","red_yellow_green","schemeRdYlGn","spectral","schemeSpectral","divergingColorSchemeIds","divergingColorInterpolators","interpolateBrBG","interpolatePRGn","interpolatePiYG","interpolatePuOr","interpolateRdBu","interpolateRdGy","interpolateRdYlBu","interpolateRdYlGn","interpolateSpectral","sequentialColorSchemes","blues","schemeBlues","greens","schemeGreens","greys","schemeGreys","oranges","schemeOranges","purples","schemePurples","reds","schemeReds","blue_green","schemeBuGn","blue_purple","schemeBuPu","green_blue","schemeGnBu","orange_red","schemeOrRd","purple_blue_green","schemePuBuGn","purple_blue","schemePuBu","purple_red","schemePuRd","red_purple","schemeRdPu","yellow_green_blue","schemeYlGnBu","yellow_green","schemeYlGn","yellow_orange_brown","schemeYlOrBr","yellow_orange_red","schemeYlOrRd","sequentialColorSchemeIds","sequentialColorInterpolators","interpolateBlues","interpolateGreens","interpolateGreys","interpolateOranges","interpolatePurples","interpolateReds","turbo","interpolateTurbo","viridis","interpolateViridis","inferno","interpolateInferno","magma","interpolateMagma","plasma","interpolatePlasma","cividis","interpolateCividis","warm","interpolateWarm","cool","interpolateCool","cubehelixDefault","interpolateCubehelixDefault","interpolateBuGn","interpolateBuPu","interpolateGnBu","interpolateOrRd","interpolatePuBuGn","interpolatePuBu","interpolatePuRd","interpolateRdPu","interpolateYlGnBu","interpolateYlGn","interpolateYlOrBr","interpolateYlOrRd","colorSchemes","colorSchemeIds","isCategoricalColorScheme","scheme","includes","isDivergingColorScheme","isSequentialColorScheme","cyclicalColorInterpolators","rainbow","interpolateRainbow","sinebow","interpolateSinebow","colorInterpolators","colorInterpolatorIds","getInheritedColorGenerator","config","theme","_isPlainObject","undefined","isInheritedColorConfigFromTheme","Error","themeColor","_get","from","isInheritedColorConfigFromContext","getColor","d","Array","isArray","modifiers","modifier","modifierType","amount","push","color","brighter","darker","opacity","length","datum","reduce","modify","rgb","toString","useInheritedColor","useMemo","ordinalColorsPropType","PropTypes","oneOfType","func","arrayOf","string","shape","oneOf","isRequired","size","number","inheritedColorPropType","array","sequentialColorScaleDefaults","getSequentialColorScale","values","minValue","maxValue","min","max","colorScale","scaleSequential","domain","clamp","range","colors","interpolator","useSequentialColorScale","divergingColorScaleDefaults","divergeAt","getDivergingColorScale","offset","scaleDiverging","t","String","map","x","useDivergingColorScale","quantizeColorScaleDefaults","steps","getQuantizeColorScale","scaleQuantize","nice","_","step","useQuantizeColorScale","getContinuousColorScale","type","isSequentialColorScaleConfig","isDivergingColorScaleConfig","isQuantizeColorScaleConfig","useContinuousColorScale","computeContinuousColorScaleColorStops","scale","stops","normalizedScale","scaleLinear","forEach","index","invertExtent","start","end","key","stopColor","colorStopsScale","copy","ticks","value","getOrdinalColorScale","identity","getIdentity","scaleOrdinal","generator","isOrdinalColorScaleConfigDatumProperty","isOrdinalColorScaleConfigScheme","useOrdinalColorScale"],"sources":["/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/colors/src/schemes/categorical.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/colors/src/schemes/diverging.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/colors/src/schemes/sequential.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/colors/src/schemes/all.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/colors/src/schemes/cyclical.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/colors/src/schemes/interpolators.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/colors/src/inheritedColor.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/colors/src/props.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/colors/src/scales/sequentialColorScale.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/colors/src/scales/divergingColorScale.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/colors/src/scales/quantizeColorScale.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/colors/src/scales/continuousColorScale.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/colors/src/scales/ordinalColorScale.ts"],"sourcesContent":["import {\n    schemeCategory10,\n    schemeAccent,\n    schemeDark2,\n    schemePaired,\n    schemePastel1,\n    schemePastel2,\n    schemeSet1,\n    schemeSet2,\n    schemeSet3,\n} from 'd3-scale-chromatic'\n\nexport const categoricalColorSchemes = {\n    nivo: ['#e8c1a0', '#f47560', '#f1e15b', '#e8a838', '#61cdbb', '#97e3d5'],\n    category10: schemeCategory10,\n    accent: schemeAccent,\n    dark2: schemeDark2,\n    paired: schemePaired,\n    pastel1: schemePastel1,\n    pastel2: schemePastel2,\n    set1: schemeSet1,\n    set2: schemeSet2,\n    set3: schemeSet3,\n}\n\nexport type CategoricalColorSchemeId = keyof typeof categoricalColorSchemes\n\nexport const categoricalColorSchemeIds = Object.keys(\n    categoricalColorSchemes\n) as CategoricalColorSchemeId[]\n","import {\n    schemeBrBG,\n    interpolateBrBG,\n    schemePRGn,\n    interpolatePRGn,\n    schemePiYG,\n    interpolatePiYG,\n    schemePuOr,\n    interpolatePuOr,\n    schemeRdBu,\n    interpolateRdBu,\n    schemeRdGy,\n    interpolateRdGy,\n    schemeRdYlBu,\n    interpolateRdYlBu,\n    schemeRdYlGn,\n    interpolateRdYlGn,\n    schemeSpectral,\n    interpolateSpectral,\n} from 'd3-scale-chromatic'\n\n// Diverging color schemes support a size k ranging from 3 to 11\nexport const divergingColorSchemes = {\n    brown_blueGreen: schemeBrBG,\n    purpleRed_green: schemePRGn,\n    pink_yellowGreen: schemePiYG,\n    purple_orange: schemePuOr,\n    red_blue: schemeRdBu,\n    red_grey: schemeRdGy,\n    red_yellow_blue: schemeRdYlBu,\n    red_yellow_green: schemeRdYlGn,\n    spectral: schemeSpectral,\n}\n\nexport type DivergingColorSchemeId = keyof typeof divergingColorSchemes\n\nexport const divergingColorSchemeIds = Object.keys(\n    divergingColorSchemes\n) as DivergingColorSchemeId[]\n\nexport const divergingColorInterpolators = {\n    brown_blueGreen: interpolateBrBG,\n    purpleRed_green: interpolatePRGn,\n    pink_yellowGreen: interpolatePiYG,\n    purple_orange: interpolatePuOr,\n    red_blue: interpolateRdBu,\n    red_grey: interpolateRdGy,\n    red_yellow_blue: interpolateRdYlBu,\n    red_yellow_green: interpolateRdYlGn,\n    spectral: interpolateSpectral,\n}\n\nexport type DivergingColorInterpolatorId = keyof typeof divergingColorInterpolators\n","import {\n    // single hue\n    schemeBlues,\n    interpolateBlues,\n    schemeGreens,\n    interpolateGreens,\n    schemeGreys,\n    interpolateGreys,\n    schemeOranges,\n    interpolateOranges,\n    schemePurples,\n    interpolatePurples,\n    schemeReds,\n    interpolateReds,\n    // multi hue\n    schemeBuGn,\n    interpolateBuGn,\n    schemeBuPu,\n    interpolateBuPu,\n    schemeGnBu,\n    interpolateGnBu,\n    schemeOrRd,\n    interpolateOrRd,\n    schemePuBuGn,\n    interpolatePuBuGn,\n    schemePuBu,\n    interpolatePuBu,\n    schemePuRd,\n    interpolatePuRd,\n    schemeRdPu,\n    interpolateRdPu,\n    schemeYlGnBu,\n    interpolateYlGnBu,\n    schemeYlGn,\n    interpolateYlGn,\n    schemeYlOrBr,\n    interpolateYlOrBr,\n    schemeYlOrRd,\n    interpolateYlOrRd,\n    interpolateTurbo,\n    interpolateViridis,\n    interpolateInferno,\n    interpolateMagma,\n    interpolatePlasma,\n    interpolateCividis,\n    interpolateWarm,\n    interpolateCool,\n    interpolateCubehelixDefault,\n} from 'd3-scale-chromatic'\n\n// Sequential, single-hue color schemes support a size k ranging from 3 to 9\n// Sequential, multi-hue color schemes support a size k ranging from 3 to 9\nexport const sequentialColorSchemes = {\n    // single hue\n    blues: schemeBlues,\n    greens: schemeGreens,\n    greys: schemeGreys,\n    oranges: schemeOranges,\n    purples: schemePurples,\n    reds: schemeReds,\n    // multi hue\n    blue_green: schemeBuGn,\n    blue_purple: schemeBuPu,\n    green_blue: schemeGnBu,\n    orange_red: schemeOrRd,\n    purple_blue_green: schemePuBuGn,\n    purple_blue: schemePuBu,\n    purple_red: schemePuRd,\n    red_purple: schemeRdPu,\n    yellow_green_blue: schemeYlGnBu,\n    yellow_green: schemeYlGn,\n    yellow_orange_brown: schemeYlOrBr,\n    yellow_orange_red: schemeYlOrRd,\n}\n\nexport type SequentialColorSchemeId = keyof typeof sequentialColorSchemes\n\nexport const sequentialColorSchemeIds = Object.keys(\n    sequentialColorSchemes\n) as SequentialColorSchemeId[]\n\nexport const sequentialColorInterpolators = {\n    // single hue\n    blues: interpolateBlues,\n    greens: interpolateGreens,\n    greys: interpolateGreys,\n    oranges: interpolateOranges,\n    purples: interpolatePurples,\n    reds: interpolateReds,\n    // multi hue\n    turbo: interpolateTurbo,\n    viridis: interpolateViridis,\n    inferno: interpolateInferno,\n    magma: interpolateMagma,\n    plasma: interpolatePlasma,\n    cividis: interpolateCividis,\n    warm: interpolateWarm,\n    cool: interpolateCool,\n    cubehelixDefault: interpolateCubehelixDefault,\n    blue_green: interpolateBuGn,\n    blue_purple: interpolateBuPu,\n    green_blue: interpolateGnBu,\n    orange_red: interpolateOrRd,\n    purple_blue_green: interpolatePuBuGn,\n    purple_blue: interpolatePuBu,\n    purple_red: interpolatePuRd,\n    red_purple: interpolateRdPu,\n    yellow_green_blue: interpolateYlGnBu,\n    yellow_green: interpolateYlGn,\n    yellow_orange_brown: interpolateYlOrBr,\n    yellow_orange_red: interpolateYlOrRd,\n}\n\nexport type SequentialColorInterpolatorId = keyof typeof sequentialColorInterpolators\n","import {\n    categoricalColorSchemes,\n    categoricalColorSchemeIds,\n    CategoricalColorSchemeId,\n} from './categorical'\nimport { divergingColorSchemes, divergingColorSchemeIds, DivergingColorSchemeId } from './diverging'\nimport {\n    sequentialColorSchemes,\n    sequentialColorSchemeIds,\n    SequentialColorSchemeId,\n} from './sequential'\n\nexport const colorSchemes = {\n    ...categoricalColorSchemes,\n    ...divergingColorSchemes,\n    ...sequentialColorSchemes,\n}\n\nexport type ColorSchemeId =\n    | CategoricalColorSchemeId\n    | DivergingColorSchemeId\n    | SequentialColorSchemeId\n\nexport const colorSchemeIds = Object.keys(colorSchemes) as ColorSchemeId[]\n\nexport const isCategoricalColorScheme = (\n    scheme: ColorSchemeId\n): scheme is CategoricalColorSchemeId =>\n    categoricalColorSchemeIds.includes(scheme as CategoricalColorSchemeId)\n\nexport const isDivergingColorScheme = (scheme: ColorSchemeId): scheme is DivergingColorSchemeId =>\n    divergingColorSchemeIds.includes(scheme as DivergingColorSchemeId)\n\nexport const isSequentialColorScheme = (scheme: ColorSchemeId): scheme is SequentialColorSchemeId =>\n    sequentialColorSchemeIds.includes(scheme as SequentialColorSchemeId)\n","import { interpolateRainbow, interpolateSinebow } from 'd3-scale-chromatic'\n\nexport const cyclicalColorInterpolators = {\n    rainbow: interpolateRainbow,\n    sinebow: interpolateSinebow,\n}\n\nexport type CyclicalColorInterpolatorId = keyof typeof cyclicalColorInterpolators\n","import { divergingColorInterpolators, DivergingColorInterpolatorId } from './diverging'\nimport { sequentialColorInterpolators, SequentialColorInterpolatorId } from './sequential'\nimport { cyclicalColorInterpolators, CyclicalColorInterpolatorId } from './cyclical'\n\nexport const colorInterpolators = {\n    ...divergingColorInterpolators,\n    ...sequentialColorInterpolators,\n    ...cyclicalColorInterpolators,\n}\n\nexport type ColorInterpolatorId =\n    | DivergingColorInterpolatorId\n    | SequentialColorInterpolatorId\n    | CyclicalColorInterpolatorId\n\nexport const colorInterpolatorIds = Object.keys(colorInterpolators) as ColorInterpolatorId[]\n","import { useMemo } from 'react'\nimport { get, isPlainObject } from 'lodash'\nimport { rgb, RGBColor } from 'd3-color'\nimport { Theme } from '@nivo/core'\n\nexport type ColorModifierBrightness = ['brighter', number]\n\nexport type ColorModifierDarkness = ['darker', number]\n\nexport type ColorModifierOpacity = ['opacity', number]\n\nexport type ColorModifier = ColorModifierBrightness | ColorModifierDarkness | ColorModifierOpacity\n\nexport type ColorModifierFunction = (color: RGBColor) => RGBColor\n\nexport type InheritedColorConfigStaticColor = string\n\nexport type InheritedColorConfigCustomFunction<Datum> = (d: Datum, ...drest: Datum[]) => string\n\nexport interface InheritedColorConfigFromTheme {\n    theme: string\n}\n\nexport interface InheritedColorConfigFromContext {\n    from: string\n    modifiers?: ColorModifier[]\n}\n\nexport type InheritedColorConfig<Datum> =\n    | InheritedColorConfigStaticColor\n    | InheritedColorConfigCustomFunction<Datum>\n    | InheritedColorConfigFromTheme\n    | InheritedColorConfigFromContext\n\nconst isInheritedColorConfigFromTheme = <Datum>(\n    config: InheritedColorConfig<Datum>\n): config is InheritedColorConfigFromTheme => {\n    return (config as InheritedColorConfigFromTheme).theme !== undefined\n}\n\nconst isInheritedColorConfigFromContext = <Datum>(\n    config: InheritedColorConfig<Datum>\n): config is InheritedColorConfigFromContext => {\n    return (config as InheritedColorConfigFromContext).from !== undefined\n}\n\n/**\n * Create a color generator for items which\n * might inherit from parent context,\n * for example labels, outlines…\n *\n * Support the following strategies:\n * - custom function\n * - color from theme\n * - color from parent, with optional color modifiers\n * - static color\n */\nexport const getInheritedColorGenerator = <Datum = any>(\n    config: InheritedColorConfig<Datum>,\n    theme?: Theme\n) => {\n    // user provided function\n    if (typeof config === 'function') {\n        return config\n    }\n\n    if (isPlainObject(config)) {\n        // use color from theme\n        if (isInheritedColorConfigFromTheme(config)) {\n            if (theme === undefined) {\n                throw new Error(`Unable to use color from theme as no theme was provided`)\n            }\n\n            const themeColor = get(theme, config.theme)\n            if (themeColor === undefined) {\n                throw new Error(`Color from theme is undefined at path: '${config.theme}'`)\n            }\n\n            return () => themeColor\n        }\n\n        // use color from parent with optional color modifiers\n        if (isInheritedColorConfigFromContext(config)) {\n            const getColor = (d: Datum) => get(d, config.from)\n\n            if (Array.isArray(config.modifiers)) {\n                const modifiers: ColorModifierFunction[] = []\n                for (const modifier of config.modifiers) {\n                    const [modifierType, amount] = modifier\n                    if (modifierType === 'brighter') {\n                        modifiers.push(color => color.brighter(amount))\n                    } else if (modifierType === 'darker') {\n                        modifiers.push(color => color.darker(amount))\n                    } else if (modifierType === 'opacity') {\n                        modifiers.push(color => {\n                            color.opacity = amount\n\n                            return color\n                        })\n                    } else {\n                        throw new Error(\n                            `Invalid color modifier: '${modifierType}', must be one of: 'brighter', 'darker', 'opacity'`\n                        )\n                    }\n                }\n\n                if (modifiers.length === 0) return getColor\n\n                return (datum: Datum) =>\n                    modifiers\n                        .reduce((color, modify) => modify(color), rgb(getColor(datum)))\n                        .toString()\n            }\n\n            // no modifier\n            return getColor\n        }\n\n        throw new Error(\n            `Invalid color spec, you should either specify 'theme' or 'from' when using a config object`\n        )\n    }\n\n    // use provided color statically\n    return () => config as string\n}\n\nexport const useInheritedColor = <Datum = any>(\n    config: InheritedColorConfig<Datum>,\n    theme?: Theme\n) => useMemo(() => getInheritedColorGenerator<Datum>(config, theme), [config, theme])\n","import PropTypes from 'prop-types'\nimport { colorSchemeIds } from './schemes'\n\nexport const ordinalColorsPropType = PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.shape({\n        scheme: PropTypes.oneOf(colorSchemeIds).isRequired,\n        size: PropTypes.number,\n    }),\n    PropTypes.shape({\n        datum: PropTypes.string.isRequired,\n    }),\n    PropTypes.string,\n])\n\nexport const inheritedColorPropType = PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    PropTypes.shape({\n        theme: PropTypes.string.isRequired,\n    }),\n    PropTypes.shape({\n        from: PropTypes.string.isRequired,\n        modifiers: PropTypes.arrayOf(PropTypes.array),\n    }),\n])\n","import { useMemo } from 'react'\nimport { scaleSequential } from 'd3-scale'\nimport { colorInterpolators, ColorInterpolatorId } from '../schemes'\n\nexport interface SequentialColorScaleBaseConfig {\n    type: 'sequential'\n    minValue?: number\n    maxValue?: number\n}\n\nexport interface SequentialColorScaleSchemeConfig extends SequentialColorScaleBaseConfig {\n    scheme?: ColorInterpolatorId\n}\n\nexport interface SequentialColorScaleColorsConfig extends SequentialColorScaleBaseConfig {\n    colors: [string, string]\n}\n\nexport interface SequentialColorScaleInterpolatorConfig extends SequentialColorScaleBaseConfig {\n    interpolator: (t: number) => string\n}\n\nexport type SequentialColorScaleConfig =\n    | SequentialColorScaleSchemeConfig\n    | SequentialColorScaleColorsConfig\n    | SequentialColorScaleInterpolatorConfig\n\nexport interface SequentialColorScaleValues {\n    min: number\n    max: number\n}\n\nexport const sequentialColorScaleDefaults: {\n    scheme: ColorInterpolatorId\n} = {\n    scheme: 'turbo',\n}\n\nexport const getSequentialColorScale = (\n    config: SequentialColorScaleConfig,\n    values: SequentialColorScaleValues\n) => {\n    const { minValue, maxValue } = config\n    const min = minValue !== undefined ? minValue : values.min\n    const max = maxValue !== undefined ? maxValue : values.max\n\n    const colorScale = scaleSequential<string>().domain([min, max]).clamp(true)\n    if ('colors' in config) {\n        colorScale.range(config.colors)\n    } else if ('interpolator' in config) {\n        colorScale.interpolator(config.interpolator)\n    } else {\n        const scheme = config.scheme ?? sequentialColorScaleDefaults.scheme\n        colorScale.interpolator(colorInterpolators[scheme])\n    }\n\n    return colorScale\n}\n\nexport const useSequentialColorScale = (\n    config: SequentialColorScaleConfig,\n    values: SequentialColorScaleValues\n) => useMemo(() => getSequentialColorScale(config, values), [config, values])\n","import { useMemo } from 'react'\nimport { scaleDiverging } from 'd3-scale'\nimport { colorInterpolators, ColorInterpolatorId } from '../schemes'\n\ninterface DivergingColorScaleBaseConfig {\n    type: 'diverging'\n    minValue?: number\n    maxValue?: number\n    divergeAt?: number\n}\n\nexport interface DivergingColorScaleSchemeConfig extends DivergingColorScaleBaseConfig {\n    scheme?: ColorInterpolatorId\n}\n\nexport interface DivergingColorScaleColorsConfig extends DivergingColorScaleBaseConfig {\n    colors: [string, string, string]\n}\n\nexport interface DivergingColorScaleInterpolatorConfig extends DivergingColorScaleBaseConfig {\n    interpolator: (t: number) => string\n}\n\nexport type DivergingColorScaleConfig =\n    | DivergingColorScaleSchemeConfig\n    | DivergingColorScaleColorsConfig\n    | DivergingColorScaleInterpolatorConfig\n\nexport interface DivergingColorScaleValues {\n    min: number\n    max: number\n}\n\nexport const divergingColorScaleDefaults: {\n    scheme: ColorInterpolatorId\n    divergeAt: number\n} = {\n    scheme: 'red_yellow_blue',\n    divergeAt: 0.5,\n}\n\nexport const getDivergingColorScale = (\n    config: DivergingColorScaleConfig,\n    values: DivergingColorScaleValues\n) => {\n    const { minValue, maxValue } = config\n    const min = minValue !== undefined ? minValue : values.min\n    const max = maxValue !== undefined ? maxValue : values.max\n    const domain = [min, min + (max - min) / 2, max]\n\n    const divergeAt = config.divergeAt ?? divergingColorScaleDefaults.divergeAt\n    const offset = 0.5 - divergeAt\n\n    const colorScale = scaleDiverging<string>().domain(domain).clamp(true)\n    let interpolator = (t: number) => String(t) as string\n    if ('colors' in config) {\n        interpolator = scaleDiverging<string>()\n            .domain(domain.map(x => x - offset * (max - min)))\n            .range(config.colors)\n            .interpolator()\n    } else if ('interpolator' in config) {\n        interpolator = config.interpolator\n    } else {\n        const scheme = config.scheme ?? divergingColorScaleDefaults.scheme\n        interpolator = colorInterpolators[scheme]\n    }\n    const offsetInterpolator = (t: number) => interpolator(t + offset)\n    return colorScale.interpolator(offsetInterpolator)\n}\n\nexport const useDivergingColorScale = (\n    config: DivergingColorScaleConfig,\n    values: DivergingColorScaleValues\n) => useMemo(() => getDivergingColorScale(config, values), [config, values])\n","import { useMemo } from 'react'\nimport { scaleQuantize } from 'd3-scale'\nimport { colorInterpolators, ColorInterpolatorId } from '../schemes'\n\n// colors from a scheme\nexport interface QuantizeColorScaleSchemeConfig {\n    type: 'quantize'\n    domain?: [number, number]\n    scheme?: ColorInterpolatorId\n    steps?: number\n}\n\n// explicit colors\nexport interface QuantizeColorScaleColorsConfig {\n    type: 'quantize'\n    domain?: [number, number]\n    colors: string[]\n}\n\nexport type QuantizeColorScaleConfig =\n    | QuantizeColorScaleSchemeConfig\n    | QuantizeColorScaleColorsConfig\n\nexport interface QuantizeColorScaleValues {\n    min: number\n    max: number\n}\n\nexport const quantizeColorScaleDefaults: {\n    scheme: ColorInterpolatorId\n    steps: NonNullable<QuantizeColorScaleSchemeConfig['steps']>\n} = {\n    scheme: 'turbo',\n    steps: 7,\n}\n\nexport const getQuantizeColorScale = (\n    config: QuantizeColorScaleConfig,\n    values: QuantizeColorScaleValues\n) => {\n    const colorScale = scaleQuantize<string>()\n        .domain(config.domain || [values.min, values.max])\n        .nice()\n\n    if ('colors' in config) {\n        colorScale.range(config.colors)\n    } else {\n        const scheme = config.scheme || quantizeColorScaleDefaults.scheme\n        const steps = config.steps === undefined ? quantizeColorScaleDefaults.steps : config.steps\n        const interpolator = colorInterpolators[scheme]\n        const colors = Array.from({ length: steps }).map((_, step) =>\n            interpolator(step * (1 / (steps - 1)))\n        )\n\n        colorScale.range(colors)\n    }\n\n    return colorScale\n}\n\nexport const useQuantizeColorScale = (\n    config: QuantizeColorScaleConfig,\n    values: QuantizeColorScaleValues\n) => useMemo(() => getQuantizeColorScale(config, values), [config, values])\n","import { useMemo } from 'react'\nimport { ScaleDiverging, ScaleQuantize, ScaleSequential, scaleLinear } from 'd3-scale'\nimport {\n    SequentialColorScaleConfig,\n    SequentialColorScaleValues,\n    getSequentialColorScale,\n} from './sequentialColorScale'\nimport {\n    DivergingColorScaleConfig,\n    DivergingColorScaleValues,\n    getDivergingColorScale,\n} from './divergingColorScale'\nimport {\n    QuantizeColorScaleConfig,\n    QuantizeColorScaleValues,\n    getQuantizeColorScale,\n} from './quantizeColorScale'\n\nexport type ContinuousColorScaleConfig =\n    | SequentialColorScaleConfig\n    | DivergingColorScaleConfig\n    | QuantizeColorScaleConfig\n\nexport type ContinuousColorScaleValues =\n    | SequentialColorScaleValues\n    | DivergingColorScaleValues\n    | QuantizeColorScaleValues\n\nconst isSequentialColorScaleConfig = (\n    config: ContinuousColorScaleConfig\n): config is SequentialColorScaleConfig => config.type === 'sequential'\n\nconst isDivergingColorScaleConfig = (\n    config: ContinuousColorScaleConfig\n): config is DivergingColorScaleConfig => config.type === 'diverging'\n\nconst isQuantizeColorScaleConfig = (\n    config: ContinuousColorScaleConfig\n): config is QuantizeColorScaleConfig => config.type === 'quantize'\n\nexport const getContinuousColorScale = <Config extends ContinuousColorScaleConfig>(\n    config: Config,\n    values: ContinuousColorScaleValues\n) => {\n    if (isSequentialColorScaleConfig(config)) {\n        return getSequentialColorScale(config, values)\n    }\n\n    if (isDivergingColorScaleConfig(config)) {\n        return getDivergingColorScale(config, values)\n    }\n\n    if (isQuantizeColorScaleConfig(config)) {\n        return getQuantizeColorScale(config, values)\n    }\n\n    throw new Error('Invalid continuous color scale config')\n}\n\nexport const useContinuousColorScale = (\n    config: ContinuousColorScaleConfig,\n    values: ContinuousColorScaleValues\n) => useMemo(() => getContinuousColorScale(config, values), [config, values])\n\nexport const computeContinuousColorScaleColorStops = (\n    scale: ScaleSequential<string> | ScaleDiverging<string> | ScaleQuantize<string>,\n    steps = 16\n) => {\n    const domain = scale.domain()\n\n    // quantize\n    if ('thresholds' in scale) {\n        const stops: {\n            key: string\n            offset: number\n            stopColor: string\n        }[] = []\n\n        const normalizedScale = scaleLinear().domain(domain).range([0, 1])\n        scale.range().forEach((color, index) => {\n            const [start, end] = scale.invertExtent(color)\n\n            stops.push({\n                key: `${index}.0`,\n                offset: normalizedScale(start),\n                stopColor: color,\n            })\n            stops.push({\n                key: `${index}.1`,\n                offset: normalizedScale(end),\n                stopColor: color,\n            })\n        })\n\n        return stops\n    }\n\n    const colorStopsScale = scale.copy()\n    if (domain.length === 2) {\n        // sequential\n        colorStopsScale.domain([0, 1])\n    } else if (domain.length === 3) {\n        // diverging\n        colorStopsScale.domain([0, 0.5, 1])\n    }\n\n    return ((colorStopsScale as any).ticks(steps) as number[]).map((value: number) => ({\n        key: `${value}`,\n        offset: value,\n        stopColor: `${colorStopsScale(value)}`,\n    }))\n}\n","import { useMemo } from 'react'\nimport { get, isPlainObject } from 'lodash'\nimport { scaleOrdinal } from 'd3-scale'\nimport {\n    ColorSchemeId,\n    colorSchemes,\n    isCategoricalColorScheme,\n    isSequentialColorScheme,\n    isDivergingColorScheme,\n} from '../schemes'\n\n/**\n * Static color.\n */\nexport type OrdinalColorScaleConfigStaticColor = string\n\n/**\n * User defined function, receiving the current datum.\n */\nexport type OrdinalColorScaleConfigCustomFunction<Datum> = (d: Datum) => string\n\n/**\n * Pre-defined color scheme.\n */\nexport interface OrdinalColorScaleConfigScheme {\n    scheme: ColorSchemeId\n    // size is useful for diverging & sequential colors,\n    // as they are array of array, whereas categorical colors\n    // are simple arrays, if the size isn't specified,\n    // the bigger array will be selected, this means the 11th\n    // for diverging colors and 9th for sequential ones.\n    size?: number\n}\n\n/**\n * User defined colors.\n */\nexport type OrdinalColorScaleConfigCustomColors = string[]\n\n/**\n * Get color from datum.\n */\nexport interface OrdinalColorScaleConfigDatumProperty {\n    // path to the color property\n    datum: string\n}\n\nexport type OrdinalColorScaleConfig<Datum = any> =\n    | OrdinalColorScaleConfigStaticColor\n    | OrdinalColorScaleConfigCustomFunction<Datum>\n    | OrdinalColorScaleConfigScheme\n    | OrdinalColorScaleConfigCustomColors\n    | OrdinalColorScaleConfigDatumProperty\n\nconst isOrdinalColorScaleConfigScheme = <Datum>(\n    config: OrdinalColorScaleConfig<Datum>\n): config is OrdinalColorScaleConfigScheme => {\n    return (config as OrdinalColorScaleConfigScheme).scheme !== undefined\n}\n\nconst isOrdinalColorScaleConfigDatumProperty = <Datum>(\n    config: OrdinalColorScaleConfig<Datum>\n): config is OrdinalColorScaleConfigDatumProperty => {\n    return (config as OrdinalColorScaleConfigDatumProperty).datum !== undefined\n}\n\nexport type DatumIdentityAccessor<Datum> = (datum: Datum) => string | number\n\nexport type OrdinalColorScale<Datum> = (d: Datum) => string\n\n/**\n * Compute an ordinal color scale\n */\nexport const getOrdinalColorScale = <Datum = any>(\n    config: OrdinalColorScaleConfig<Datum>,\n    identity?: string | DatumIdentityAccessor<Datum>\n): OrdinalColorScale<Datum> => {\n    // user defined function\n    if (typeof config === 'function') {\n        return config\n    }\n\n    // compute accessor to the datum identity\n    const getIdentity =\n        typeof identity === 'function' ? identity : (datum: Datum) => get(datum, identity as string)\n\n    // user defined color array\n    if (Array.isArray(config)) {\n        const scale = scaleOrdinal(config)\n        const generator = (datum: Datum) => scale(getIdentity(datum))\n        generator.scale = scale\n\n        return generator as OrdinalColorScale<Datum>\n    }\n\n    if (isPlainObject(config)) {\n        // use color from current datum\n        if (isOrdinalColorScaleConfigDatumProperty(config)) {\n            return (datum: Datum) => get(datum, config.datum)\n        }\n\n        // ordinal scale from predefined scheme\n        if (isOrdinalColorScaleConfigScheme(config)) {\n            // categorical color scheme\n            if (isCategoricalColorScheme(config.scheme)) {\n                const scale = scaleOrdinal(colorSchemes[config.scheme])\n                const generator = (datum: Datum) => scale(getIdentity(datum))\n                generator.scale = scale\n\n                return generator as OrdinalColorScale<Datum>\n            }\n\n            // Diverging color schemes support a size k ranging from 3 to 11\n            if (isDivergingColorScheme(config.scheme)) {\n                if (config.size !== undefined && (config.size < 3 || config.size > 11)) {\n                    throw new Error(\n                        `Invalid size '${config.size}' for diverging color scheme '${config.scheme}', must be between 3~11`\n                    )\n                }\n\n                const scale = scaleOrdinal(colorSchemes[config.scheme][config.size || 11])\n                const generator = (d: Datum) => scale(getIdentity(d))\n                generator.scale = scale\n\n                return generator as OrdinalColorScale<Datum>\n            }\n\n            // Sequential, single-hue color schemes support a size k ranging from 3 to 9.\n            // Sequential, multi-hue color schemes support a size k ranging from 3 to 9.\n            if (isSequentialColorScheme(config.scheme)) {\n                if (config.size !== undefined && (config.size < 3 || config.size > 9)) {\n                    throw new Error(\n                        `Invalid size '${config.size}' for sequential color scheme '${config.scheme}', must be between 3~9`\n                    )\n                }\n\n                const scale = scaleOrdinal(colorSchemes[config.scheme][config.size || 9])\n                const generator = (d: Datum) => scale(getIdentity(d))\n                generator.scale = scale\n\n                return generator as OrdinalColorScale<Datum>\n            }\n        }\n\n        throw new Error(\n            `Invalid colors, when using an object, you should either pass a 'datum' or a 'scheme' property`\n        )\n    }\n\n    // static color\n    return () => config as string\n}\n\nexport const useOrdinalColorScale = <Datum = any>(\n    config: OrdinalColorScaleConfig<Datum>,\n    identity: string | DatumIdentityAccessor<Datum>\n) => useMemo(() => getOrdinalColorScale<Datum>(config, identity), [config, identity])\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}