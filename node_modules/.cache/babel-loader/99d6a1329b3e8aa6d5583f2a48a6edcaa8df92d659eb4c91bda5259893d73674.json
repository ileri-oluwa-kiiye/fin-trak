{"ast":null,"code":"import { jsx as t, jsxs as e } from \"react/jsx-runtime\";\nimport { scaleLinear as i } from \"d3-scale\";\nimport { getValueFormatter as n, useTheme as o, degreesToRadians as r } from \"@nivo/core\";\nimport { computeContinuousColorScaleColorStops as l } from \"@nivo/colors\";\nimport * as a from \"react\";\nimport { Fragment as c, useState as s, useCallback as d, useMemo as h } from \"react\";\nimport g from \"prop-types\";\nvar m = function (e) {\n    var i = e.x,\n      n = e.y,\n      o = e.size,\n      r = e.fill,\n      l = e.opacity,\n      a = void 0 === l ? 1 : l,\n      c = e.borderWidth,\n      s = void 0 === c ? 0 : c,\n      d = e.borderColor;\n    return t(\"circle\", {\n      r: o / 2,\n      cx: i + o / 2,\n      cy: n + o / 2,\n      fill: r,\n      opacity: a,\n      strokeWidth: s,\n      stroke: void 0 === d ? \"transparent\" : d,\n      style: {\n        pointerEvents: \"none\"\n      }\n    });\n  },\n  f = function (e) {\n    var i = e.x,\n      n = e.y,\n      o = e.size,\n      r = e.fill,\n      l = e.opacity,\n      a = void 0 === l ? 1 : l,\n      c = e.borderWidth,\n      s = void 0 === c ? 0 : c,\n      d = e.borderColor;\n    return t(\"g\", {\n      transform: \"translate(\" + i + \",\" + n + \")\",\n      children: t(\"path\", {\n        d: \"\\n                    M\" + o / 2 + \" 0\\n                    L\" + .8 * o + \" \" + o / 2 + \"\\n                    L\" + o / 2 + \" \" + o + \"\\n                    L\" + .2 * o + \" \" + o / 2 + \"\\n                    L\" + o / 2 + \" 0\\n                \",\n        fill: r,\n        opacity: a,\n        strokeWidth: s,\n        stroke: void 0 === d ? \"transparent\" : d,\n        style: {\n          pointerEvents: \"none\"\n        }\n      })\n    });\n  },\n  u = function (e) {\n    var i = e.x,\n      n = e.y,\n      o = e.size,\n      r = e.fill,\n      l = e.opacity,\n      a = void 0 === l ? 1 : l,\n      c = e.borderWidth,\n      s = void 0 === c ? 0 : c,\n      d = e.borderColor;\n    return t(\"rect\", {\n      x: i,\n      y: n,\n      fill: r,\n      opacity: a,\n      strokeWidth: s,\n      stroke: void 0 === d ? \"transparent\" : d,\n      width: o,\n      height: o,\n      style: {\n        pointerEvents: \"none\"\n      }\n    });\n  },\n  v = function (e) {\n    var i = e.x,\n      n = e.y,\n      o = e.size,\n      r = e.fill,\n      l = e.opacity,\n      a = void 0 === l ? 1 : l,\n      c = e.borderWidth,\n      s = void 0 === c ? 0 : c,\n      d = e.borderColor;\n    return t(\"g\", {\n      transform: \"translate(\" + i + \",\" + n + \")\",\n      children: t(\"path\", {\n        d: \"\\n                M\" + o / 2 + \" 0\\n                L\" + o + \" \" + o + \"\\n                L0 \" + o + \"\\n                L\" + o / 2 + \" 0\\n            \",\n        fill: r,\n        opacity: a,\n        strokeWidth: s,\n        stroke: void 0 === d ? \"transparent\" : d,\n        style: {\n          pointerEvents: \"none\"\n        }\n      })\n    });\n  };\nfunction p() {\n  return p = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var i = arguments[e];\n      for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (t[n] = i[n]);\n    }\n    return t;\n  }, p.apply(this, arguments);\n}\nvar y = {\n    length: 200,\n    thickness: 16,\n    direction: \"row\",\n    tickPosition: \"after\",\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: !1,\n    tickFormat: function (t) {\n      return \"\" + t;\n    },\n    titleAlign: \"start\",\n    titleOffset: 4\n  },\n  b = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  },\n  k = function (t) {\n    var e,\n      i = t.direction,\n      n = t.itemsSpacing,\n      o = t.padding,\n      r = t.itemCount,\n      l = t.itemWidth,\n      a = t.itemHeight;\n    if (\"number\" != typeof o && (\"object\" != typeof (e = o) || Array.isArray(e) || null === e)) throw new Error(\"Invalid property padding, must be one of: number, object\");\n    var c = \"number\" == typeof o ? {\n        top: o,\n        right: o,\n        bottom: o,\n        left: o\n      } : p({}, b, o),\n      s = c.left + c.right,\n      d = c.top + c.bottom,\n      h = l + s,\n      g = a + d,\n      m = (r - 1) * n;\n    return \"row\" === i ? h = l * r + m + s : \"column\" === i && (g = a * r + m + d), {\n      width: h,\n      height: g,\n      padding: c\n    };\n  },\n  x = function (t) {\n    var e = t.anchor,\n      i = t.translateX,\n      n = t.translateY,\n      o = t.containerWidth,\n      r = t.containerHeight,\n      l = t.width,\n      a = t.height,\n      c = i,\n      s = n;\n    switch (e) {\n      case \"top\":\n        c += (o - l) / 2;\n        break;\n      case \"top-right\":\n        c += o - l;\n        break;\n      case \"right\":\n        c += o - l, s += (r - a) / 2;\n        break;\n      case \"bottom-right\":\n        c += o - l, s += r - a;\n        break;\n      case \"bottom\":\n        c += (o - l) / 2, s += r - a;\n        break;\n      case \"bottom-left\":\n        s += r - a;\n        break;\n      case \"left\":\n        s += (r - a) / 2;\n        break;\n      case \"center\":\n        c += (o - l) / 2, s += (r - a) / 2;\n    }\n    return {\n      x: c,\n      y: s\n    };\n  },\n  S = function (t) {\n    var e,\n      i,\n      n,\n      o,\n      r,\n      l,\n      a = t.direction,\n      c = t.justify,\n      s = t.symbolSize,\n      d = t.symbolSpacing,\n      h = t.width,\n      g = t.height;\n    switch (a) {\n      case \"left-to-right\":\n        e = 0, i = (g - s) / 2, o = g / 2, l = \"central\", c ? (n = h, r = \"end\") : (n = s + d, r = \"start\");\n        break;\n      case \"right-to-left\":\n        e = h - s, i = (g - s) / 2, o = g / 2, l = \"central\", c ? (n = 0, r = \"start\") : (n = h - s - d, r = \"end\");\n        break;\n      case \"top-to-bottom\":\n        e = (h - s) / 2, i = 0, n = h / 2, r = \"middle\", c ? (o = g, l = \"alphabetic\") : (o = s + d, l = \"text-before-edge\");\n        break;\n      case \"bottom-to-top\":\n        e = (h - s) / 2, i = g - s, n = h / 2, r = \"middle\", c ? (o = 0, l = \"text-before-edge\") : (o = g - s - d, l = \"alphabetic\");\n    }\n    return {\n      symbolX: e,\n      symbolY: i,\n      labelX: n,\n      labelY: o,\n      labelAnchor: r,\n      labelAlignment: l\n    };\n  },\n  A = function (t) {\n    var e,\n      o = t.scale,\n      r = t.ticks,\n      a = t.length,\n      c = void 0 === a ? y.length : a,\n      s = t.thickness,\n      d = void 0 === s ? y.thickness : s,\n      h = t.direction,\n      g = void 0 === h ? y.direction : h,\n      m = t.tickPosition,\n      f = void 0 === m ? y.tickPosition : m,\n      u = t.tickSize,\n      v = void 0 === u ? y.tickSize : u,\n      p = t.tickSpacing,\n      b = void 0 === p ? y.tickSpacing : p,\n      k = t.tickOverlap,\n      x = void 0 === k ? y.tickOverlap : k,\n      S = t.tickFormat,\n      A = void 0 === S ? y.tickFormat : S,\n      W = t.title,\n      z = t.titleAlign,\n      C = void 0 === z ? y.titleAlign : z,\n      O = t.titleOffset,\n      B = void 0 === O ? y.titleOffset : O,\n      w = \"column\" === g ? [].concat(o.domain()).reverse() : o.domain(),\n      X = i().domain(w);\n    2 === w.length ? X.range([0, c]) : 3 === w.length && X.range([0, c / 2, c]), e = \"thresholds\" in o ? [w[0]].concat(o.thresholds(), [w[1]]) : Array.isArray(r) ? r : o.ticks(r);\n    var Y,\n      H,\n      E,\n      j,\n      T,\n      L,\n      M = l(o, 32),\n      F = n(A),\n      P = [],\n      R = 0,\n      q = 0;\n    if (\"row\" === g) {\n      var V, D, G;\n      Y = c, H = d, q = 1;\n      var I;\n      T = 0, E = \"start\" === C ? 0 : \"middle\" === C ? c / 2 : c, \"before\" === f ? (V = -v, D = x ? d : 0, G = -v - b, I = \"alphabetic\", j = d + B, L = \"hanging\") : (V = x ? 0 : d, G = (D = d + v) + b, I = \"hanging\", j = -B, L = \"alphabetic\"), e.forEach(function (t) {\n        var e = X(t);\n        P.push({\n          x1: e,\n          y1: V,\n          x2: e,\n          y2: D,\n          text: F(t),\n          textX: e,\n          textY: G,\n          textHorizontalAlign: \"middle\",\n          textVerticalAlign: I\n        });\n      });\n    } else {\n      var N, _, J, K;\n      Y = d, H = c, R = 1;\n      T = -90, j = \"start\" === C ? c : \"middle\" === C ? c / 2 : 0, \"before\" === f ? (_ = x ? d : 0, J = (N = -v) - b, K = \"end\", E = d + B, L = \"hanging\") : (N = x ? 0 : d, J = (_ = d + v) + b, K = \"start\", E = -B, L = \"alphabetic\"), e.forEach(function (t) {\n        var e = X(t);\n        P.push({\n          x1: N,\n          y1: e,\n          x2: _,\n          y2: e,\n          text: F(t),\n          textX: J,\n          textY: e,\n          textHorizontalAlign: K,\n          textVerticalAlign: \"central\"\n        });\n      });\n    }\n    return {\n      width: Y,\n      height: H,\n      gradientX1: 0,\n      gradientY1: R,\n      gradientX2: q,\n      gradientY2: 0,\n      colorStops: M,\n      ticks: P,\n      titleText: W,\n      titleX: E,\n      titleY: j,\n      titleRotation: T,\n      titleHorizontalAlign: C,\n      titleVerticalAlign: L\n    };\n  },\n  W = function (i) {\n    var n = i.scale,\n      r = i.ticks,\n      l = i.length,\n      a = void 0 === l ? y.length : l,\n      s = i.thickness,\n      d = void 0 === s ? y.thickness : s,\n      h = i.direction,\n      g = void 0 === h ? y.direction : h,\n      m = i.tickPosition,\n      f = void 0 === m ? y.tickPosition : m,\n      u = i.tickSize,\n      v = void 0 === u ? y.tickSize : u,\n      b = i.tickSpacing,\n      k = void 0 === b ? y.tickSpacing : b,\n      x = i.tickOverlap,\n      S = void 0 === x ? y.tickOverlap : x,\n      W = i.tickFormat,\n      z = void 0 === W ? y.tickFormat : W,\n      C = i.title,\n      O = i.titleAlign,\n      B = void 0 === O ? y.titleAlign : O,\n      w = i.titleOffset,\n      X = A({\n        scale: n,\n        ticks: r,\n        length: a,\n        thickness: d,\n        direction: g,\n        tickPosition: f,\n        tickSize: v,\n        tickSpacing: k,\n        tickOverlap: S,\n        tickFormat: z,\n        title: C,\n        titleAlign: B,\n        titleOffset: void 0 === w ? y.titleOffset : w\n      }),\n      Y = X.width,\n      H = X.height,\n      E = X.gradientX1,\n      j = X.gradientY1,\n      T = X.gradientX2,\n      L = X.gradientY2,\n      M = X.ticks,\n      F = X.colorStops,\n      P = X.titleText,\n      R = X.titleX,\n      q = X.titleY,\n      V = X.titleRotation,\n      D = X.titleVerticalAlign,\n      G = X.titleHorizontalAlign,\n      I = o(),\n      N = \"ContinuousColorsLegendSvgGradient.\" + g + \".\" + F.map(function (t) {\n        return t.offset;\n      }).join(\"_\");\n    return e(\"g\", {\n      children: [t(\"defs\", {\n        children: t(\"linearGradient\", {\n          id: N,\n          x1: E,\n          y1: j,\n          x2: T,\n          y2: L,\n          children: F.map(function (e) {\n            return t(\"stop\", p({}, e));\n          })\n        })\n      }), P && t(\"text\", {\n        transform: \"translate(\" + R + \", \" + q + \") rotate(\" + V + \")\",\n        textAnchor: G,\n        dominantBaseline: D,\n        style: I.legends.title.text,\n        children: P\n      }), t(\"rect\", {\n        width: Y,\n        height: H,\n        fill: \"url(#\" + N\n      }), M.map(function (i, n) {\n        return e(c, {\n          children: [t(\"line\", {\n            x1: i.x1,\n            y1: i.y1,\n            x2: i.x2,\n            y2: i.y2,\n            style: I.legends.ticks.line\n          }), t(\"text\", {\n            x: i.textX,\n            y: i.textY,\n            textAnchor: i.textHorizontalAlign,\n            dominantBaseline: i.textVerticalAlign,\n            style: I.legends.ticks.text,\n            children: i.text\n          })]\n        }, n);\n      })]\n    });\n  },\n  z = [\"containerWidth\", \"containerHeight\", \"anchor\", \"translateX\", \"translateY\", \"length\", \"thickness\", \"direction\"],\n  C = function (e) {\n    var i,\n      n,\n      o = e.containerWidth,\n      r = e.containerHeight,\n      l = e.anchor,\n      a = e.translateX,\n      c = void 0 === a ? 0 : a,\n      s = e.translateY,\n      d = void 0 === s ? 0 : s,\n      h = e.length,\n      g = void 0 === h ? y.length : h,\n      m = e.thickness,\n      f = void 0 === m ? y.thickness : m,\n      u = e.direction,\n      v = void 0 === u ? y.direction : u,\n      b = function (t, e) {\n        if (null == t) return {};\n        var i,\n          n,\n          o = {},\n          r = Object.keys(t);\n        for (n = 0; n < r.length; n++) i = r[n], e.indexOf(i) >= 0 || (o[i] = t[i]);\n        return o;\n      }(e, z);\n    \"row\" === v ? (i = g, n = f) : (i = f, n = g);\n    var k = x({\n        anchor: l,\n        translateX: c,\n        translateY: d,\n        containerWidth: o,\n        containerHeight: r,\n        width: i,\n        height: n\n      }),\n      S = k.x,\n      A = k.y;\n    return t(\"g\", {\n      transform: \"translate(\" + S + \", \" + A + \")\",\n      children: t(W, p({\n        length: g,\n        thickness: f,\n        direction: v\n      }, b))\n    });\n  },\n  O = {\n    circle: m,\n    diamond: f,\n    square: u,\n    triangle: v\n  },\n  B = function (i) {\n    var n,\n      r,\n      l,\n      c,\n      h,\n      g,\n      m,\n      f,\n      u,\n      v,\n      y,\n      b = i.x,\n      k = i.y,\n      x = i.width,\n      A = i.height,\n      W = i.data,\n      z = i.direction,\n      C = void 0 === z ? \"left-to-right\" : z,\n      B = i.justify,\n      w = void 0 !== B && B,\n      X = i.textColor,\n      Y = i.background,\n      H = void 0 === Y ? \"transparent\" : Y,\n      E = i.opacity,\n      j = void 0 === E ? 1 : E,\n      T = i.symbolShape,\n      L = void 0 === T ? \"square\" : T,\n      M = i.symbolSize,\n      F = void 0 === M ? 16 : M,\n      P = i.symbolSpacing,\n      R = void 0 === P ? 8 : P,\n      q = i.symbolBorderWidth,\n      V = void 0 === q ? 0 : q,\n      D = i.symbolBorderColor,\n      G = void 0 === D ? \"transparent\" : D,\n      I = i.onClick,\n      N = i.onMouseEnter,\n      _ = i.onMouseLeave,\n      J = i.toggleSerie,\n      K = i.effects,\n      Q = s({}),\n      U = Q[0],\n      Z = Q[1],\n      $ = o(),\n      tt = d(function (t) {\n        if (K) {\n          var e = K.filter(function (t) {\n            return \"hover\" === t.on;\n          }).reduce(function (t, e) {\n            return p({}, t, e.style);\n          }, {});\n          Z(e);\n        }\n        null == N || N(W, t);\n      }, [N, W, K]),\n      et = d(function (t) {\n        if (K) {\n          var e = K.filter(function (t) {\n            return \"hover\" !== t.on;\n          }).reduce(function (t, e) {\n            return p({}, t, e.style);\n          }, {});\n          Z(e);\n        }\n        null == _ || _(W, t);\n      }, [_, W, K]),\n      it = S({\n        direction: C,\n        justify: w,\n        symbolSize: null != (n = U.symbolSize) ? n : F,\n        symbolSpacing: R,\n        width: x,\n        height: A\n      }),\n      nt = it.symbolX,\n      ot = it.symbolY,\n      rt = it.labelX,\n      lt = it.labelY,\n      at = it.labelAnchor,\n      ct = it.labelAlignment,\n      st = [I, N, _, J].some(function (t) {\n        return void 0 !== t;\n      }),\n      dt = \"function\" == typeof L ? L : O[L];\n    return e(\"g\", {\n      transform: \"translate(\" + b + \",\" + k + \")\",\n      style: {\n        opacity: null != (r = U.itemOpacity) ? r : j\n      },\n      children: [t(\"rect\", {\n        width: x,\n        height: A,\n        fill: null != (l = U.itemBackground) ? l : H,\n        style: {\n          cursor: st ? \"pointer\" : \"auto\"\n        },\n        onClick: function (t) {\n          null == I || I(W, t), null == J || J(W.id);\n        },\n        onMouseEnter: tt,\n        onMouseLeave: et\n      }), a.createElement(dt, p({\n        id: W.id,\n        x: nt,\n        y: ot,\n        size: null != (c = U.symbolSize) ? c : F,\n        fill: null != (h = null != (g = W.fill) ? g : W.color) ? h : \"black\",\n        borderWidth: null != (m = U.symbolBorderWidth) ? m : V,\n        borderColor: null != (f = U.symbolBorderColor) ? f : G\n      }, W.hidden ? $.legends.hidden.symbol : void 0)), t(\"text\", {\n        textAnchor: at,\n        style: p({}, $.legends.text, {\n          fill: null != (u = null != (v = null != (y = U.itemTextColor) ? y : X) ? v : $.legends.text.fill) ? u : \"black\",\n          dominantBaseline: ct,\n          pointerEvents: \"none\",\n          userSelect: \"none\"\n        }, W.hidden ? $.legends.hidden.text : void 0),\n        x: rt,\n        y: lt,\n        children: W.label\n      })]\n    });\n  },\n  w = function (e) {\n    var i = e.data,\n      n = e.x,\n      o = e.y,\n      r = e.direction,\n      l = e.padding,\n      a = void 0 === l ? 0 : l,\n      c = e.justify,\n      s = e.effects,\n      d = e.itemWidth,\n      h = e.itemHeight,\n      g = e.itemDirection,\n      m = void 0 === g ? \"left-to-right\" : g,\n      f = e.itemsSpacing,\n      u = void 0 === f ? 0 : f,\n      v = e.itemTextColor,\n      p = e.itemBackground,\n      y = void 0 === p ? \"transparent\" : p,\n      b = e.itemOpacity,\n      x = void 0 === b ? 1 : b,\n      S = e.symbolShape,\n      A = e.symbolSize,\n      W = e.symbolSpacing,\n      z = e.symbolBorderWidth,\n      C = e.symbolBorderColor,\n      O = e.onClick,\n      w = e.onMouseEnter,\n      X = e.onMouseLeave,\n      Y = e.toggleSerie,\n      H = k({\n        itemCount: i.length,\n        itemWidth: d,\n        itemHeight: h,\n        itemsSpacing: u,\n        direction: r,\n        padding: a\n      }).padding,\n      E = \"row\" === r ? d + u : 0,\n      j = \"column\" === r ? h + u : 0;\n    return t(\"g\", {\n      transform: \"translate(\" + n + \",\" + o + \")\",\n      children: i.map(function (e, i) {\n        return t(B, {\n          data: e,\n          x: i * E + H.left,\n          y: i * j + H.top,\n          width: d,\n          height: h,\n          direction: m,\n          justify: c,\n          effects: s,\n          textColor: v,\n          background: y,\n          opacity: x,\n          symbolShape: S,\n          symbolSize: A,\n          symbolSpacing: W,\n          symbolBorderWidth: z,\n          symbolBorderColor: C,\n          onClick: O,\n          onMouseEnter: w,\n          onMouseLeave: X,\n          toggleSerie: Y\n        }, i);\n      })\n    });\n  },\n  X = function (e) {\n    var i = e.data,\n      n = e.containerWidth,\n      o = e.containerHeight,\n      r = e.translateX,\n      l = void 0 === r ? 0 : r,\n      a = e.translateY,\n      c = void 0 === a ? 0 : a,\n      s = e.anchor,\n      d = e.direction,\n      h = e.padding,\n      g = void 0 === h ? 0 : h,\n      m = e.justify,\n      f = e.itemsSpacing,\n      u = void 0 === f ? 0 : f,\n      v = e.itemWidth,\n      p = e.itemHeight,\n      y = e.itemDirection,\n      b = e.itemTextColor,\n      S = e.itemBackground,\n      A = e.itemOpacity,\n      W = e.symbolShape,\n      z = e.symbolSize,\n      C = e.symbolSpacing,\n      O = e.symbolBorderWidth,\n      B = e.symbolBorderColor,\n      X = e.onClick,\n      Y = e.onMouseEnter,\n      H = e.onMouseLeave,\n      E = e.toggleSerie,\n      j = e.effects,\n      T = k({\n        itemCount: i.length,\n        itemsSpacing: u,\n        itemWidth: v,\n        itemHeight: p,\n        direction: d,\n        padding: g\n      }),\n      L = T.width,\n      M = T.height,\n      F = x({\n        anchor: s,\n        translateX: l,\n        translateY: c,\n        containerWidth: n,\n        containerHeight: o,\n        width: L,\n        height: M\n      }),\n      P = F.x,\n      R = F.y;\n    return t(w, {\n      data: i,\n      x: P,\n      y: R,\n      direction: d,\n      padding: g,\n      justify: m,\n      effects: j,\n      itemsSpacing: u,\n      itemWidth: v,\n      itemHeight: p,\n      itemDirection: y,\n      itemTextColor: b,\n      itemBackground: S,\n      itemOpacity: A,\n      symbolShape: W,\n      symbolSize: z,\n      symbolSpacing: C,\n      symbolBorderWidth: O,\n      symbolBorderColor: B,\n      onClick: X,\n      onMouseEnter: Y,\n      onMouseLeave: H,\n      toggleSerie: \"boolean\" == typeof E ? void 0 : E\n    });\n  },\n  Y = {\n    start: \"left\",\n    middle: \"center\",\n    end: \"right\"\n  },\n  H = function (t, e) {\n    var i = e.data,\n      n = e.containerWidth,\n      o = e.containerHeight,\n      r = e.translateX,\n      l = void 0 === r ? 0 : r,\n      a = e.translateY,\n      c = void 0 === a ? 0 : a,\n      s = e.anchor,\n      d = e.direction,\n      h = e.padding,\n      g = void 0 === h ? 0 : h,\n      m = e.justify,\n      f = void 0 !== m && m,\n      u = e.itemsSpacing,\n      v = void 0 === u ? 0 : u,\n      p = e.itemWidth,\n      y = e.itemHeight,\n      b = e.itemDirection,\n      A = void 0 === b ? \"left-to-right\" : b,\n      W = e.itemTextColor,\n      z = e.symbolSize,\n      C = void 0 === z ? 16 : z,\n      O = e.symbolSpacing,\n      B = void 0 === O ? 8 : O,\n      w = e.theme,\n      X = k({\n        itemCount: i.length,\n        itemWidth: p,\n        itemHeight: y,\n        itemsSpacing: v,\n        direction: d,\n        padding: g\n      }),\n      H = X.width,\n      E = X.height,\n      j = X.padding,\n      T = x({\n        anchor: s,\n        translateX: l,\n        translateY: c,\n        containerWidth: n,\n        containerHeight: o,\n        width: H,\n        height: E\n      }),\n      L = T.x,\n      M = T.y,\n      F = \"row\" === d ? p + v : 0,\n      P = \"column\" === d ? y + v : 0;\n    t.save(), t.translate(L, M), t.font = w.legends.text.fontSize + \"px \" + (w.legends.text.fontFamily || \"sans-serif\"), i.forEach(function (e, i) {\n      var n,\n        o,\n        r = i * F + j.left,\n        l = i * P + j.top,\n        a = S({\n          direction: A,\n          justify: f,\n          symbolSize: C,\n          symbolSpacing: B,\n          width: p,\n          height: y\n        }),\n        c = a.symbolX,\n        s = a.symbolY,\n        d = a.labelX,\n        h = a.labelY,\n        g = a.labelAnchor,\n        m = a.labelAlignment;\n      t.fillStyle = null != (n = e.color) ? n : \"black\", t.fillRect(r + c, l + s, C, C), t.textAlign = Y[g], \"central\" === m && (t.textBaseline = \"middle\"), t.fillStyle = null != (o = null != W ? W : w.legends.text.fill) ? o : \"black\", t.fillText(String(e.label), r + d, l + h);\n    }), t.restore();\n  },\n  E = function (t, e) {\n    var i = e.containerWidth,\n      n = e.containerHeight,\n      o = e.anchor,\n      l = e.translateX,\n      a = void 0 === l ? 0 : l,\n      c = e.translateY,\n      s = void 0 === c ? 0 : c,\n      d = e.scale,\n      h = e.length,\n      g = void 0 === h ? y.length : h,\n      m = e.thickness,\n      f = void 0 === m ? y.thickness : m,\n      u = e.direction,\n      v = void 0 === u ? y.direction : u,\n      p = e.ticks,\n      b = e.tickPosition,\n      k = void 0 === b ? y.tickPosition : b,\n      S = e.tickSize,\n      W = void 0 === S ? y.tickSize : S,\n      z = e.tickSpacing,\n      C = void 0 === z ? y.tickSpacing : z,\n      O = e.tickOverlap,\n      B = void 0 === O ? y.tickOverlap : O,\n      w = e.tickFormat,\n      X = void 0 === w ? y.tickFormat : w,\n      Y = e.title,\n      H = e.titleAlign,\n      E = void 0 === H ? y.titleAlign : H,\n      j = e.titleOffset,\n      T = void 0 === j ? y.titleOffset : j,\n      L = e.theme,\n      M = A({\n        scale: d,\n        ticks: p,\n        length: g,\n        thickness: f,\n        direction: v,\n        tickPosition: k,\n        tickSize: W,\n        tickSpacing: C,\n        tickOverlap: B,\n        tickFormat: X,\n        title: Y,\n        titleAlign: E,\n        titleOffset: T\n      }),\n      F = M.width,\n      P = M.height,\n      R = M.gradientX1,\n      q = M.gradientY1,\n      V = M.gradientX2,\n      D = M.gradientY2,\n      G = M.colorStops,\n      I = M.ticks,\n      N = M.titleText,\n      _ = M.titleX,\n      J = M.titleY,\n      K = M.titleRotation,\n      Q = M.titleVerticalAlign,\n      U = M.titleHorizontalAlign,\n      Z = x({\n        anchor: o,\n        translateX: a,\n        translateY: s,\n        containerWidth: i,\n        containerHeight: n,\n        width: F,\n        height: P\n      }),\n      $ = Z.x,\n      tt = Z.y,\n      et = {\n        font: t.font,\n        textAlign: t.textAlign,\n        textBaseline: t.textBaseline\n      };\n    t.save(), t.translate($, tt);\n    var it = t.createLinearGradient(R * F, q * P, V * F, D * P);\n    G.forEach(function (t) {\n      it.addColorStop(t.offset, t.stopColor);\n    }), t.fillStyle = it, t.fillRect(0, 0, F, P), t.font = (L.legends.ticks.text.fontWeight ? L.legends.ticks.text.fontWeight + \" \" : \"\") + L.legends.ticks.text.fontSize + \"px \" + L.legends.ticks.text.fontFamily, I.forEach(function (e) {\n      var i;\n      (null != (i = L.legends.ticks.line.strokeWidth) ? i : 0) > 0 && (t.lineWidth = Number(L.axis.ticks.line.strokeWidth), L.axis.ticks.line.stroke && (t.strokeStyle = L.axis.ticks.line.stroke), t.lineCap = \"square\", t.beginPath(), t.moveTo(e.x1, e.y1), t.lineTo(e.x2, e.y2), t.stroke()), L.legends.ticks.text.fill && (t.fillStyle = L.legends.ticks.text.fill), t.textAlign = \"middle\" === e.textHorizontalAlign ? \"center\" : e.textHorizontalAlign, t.textBaseline = \"central\" === e.textVerticalAlign ? \"middle\" : e.textVerticalAlign, t.fillText(e.text, e.textX, e.textY);\n    }), N && (t.save(), t.translate(_, J), t.rotate(r(K)), t.font = (L.legends.title.text.fontWeight ? L.legends.title.text.fontWeight + \" \" : \"\") + L.legends.title.text.fontSize + \"px \" + L.legends.title.text.fontFamily, L.legends.title.text.fill && (t.fillStyle = L.legends.title.text.fill), t.textAlign = \"middle\" === U ? \"center\" : U, t.textBaseline = Q, t.fillText(N, 0, 0), t.restore()), t.restore(), t.font = et.font, t.textAlign = et.textAlign, t.textBaseline = et.textBaseline;\n  },\n  j = function (t) {\n    var e = t.scale,\n      i = t.domain,\n      n = t.reverse,\n      o = void 0 !== n && n,\n      r = t.valueFormat,\n      l = void 0 === r ? function (t) {\n        return t;\n      } : r,\n      a = t.separator,\n      c = void 0 === a ? \" - \" : a;\n    return h(function () {\n      var t = (null != i ? i : e.range()).map(function (t, i) {\n        var n = e.invertExtent(t),\n          o = n[0],\n          r = n[1];\n        return {\n          id: t,\n          index: i,\n          extent: [o, r],\n          label: \"\" + l(o) + c + l(r),\n          value: e(o),\n          color: t\n        };\n      });\n      return o && t.reverse(), t;\n    }, [i, e, o, c, l]);\n  },\n  T = {\n    data: g.arrayOf(g.object),\n    anchor: g.oneOf([\"top\", \"top-right\", \"right\", \"bottom-right\", \"bottom\", \"bottom-left\", \"left\", \"top-left\", \"center\"]).isRequired,\n    translateX: g.number,\n    translateY: g.number,\n    direction: g.oneOf([\"row\", \"column\"]).isRequired,\n    itemsSpacing: g.number,\n    itemWidth: g.number.isRequired,\n    itemHeight: g.number.isRequired,\n    itemDirection: g.oneOf([\"left-to-right\", \"right-to-left\", \"top-to-bottom\", \"bottom-to-top\"]),\n    itemTextColor: g.string,\n    itemBackground: g.string,\n    itemOpacity: g.number,\n    symbolShape: g.oneOfType([g.oneOf([\"circle\", \"diamond\", \"square\", \"triangle\"]), g.func]),\n    symbolSize: g.number,\n    symbolSpacing: g.number,\n    symbolBorderWidth: g.number,\n    symbolBorderColor: g.string,\n    onClick: g.func,\n    onMouseEnter: g.func,\n    onMouseLeave: g.func,\n    effects: g.arrayOf(g.shape({\n      on: g.oneOfType([g.oneOf([\"hover\"])]).isRequired,\n      style: g.shape({\n        itemTextColor: g.string,\n        itemBackground: g.string,\n        itemOpacity: g.number,\n        symbolSize: g.number,\n        symbolBorderWidth: g.number,\n        symbolBorderColor: g.string\n      }).isRequired\n    }))\n  };\nexport { C as AnchoredContinuousColorsLegendSvg, X as BoxLegendSvg, W as ContinuousColorsLegendSvg, T as LegendPropShape, w as LegendSvg, B as LegendSvgItem, m as SymbolCircle, f as SymbolDiamond, u as SymbolSquare, v as SymbolTriangle, A as computeContinuousColorsLegend, k as computeDimensions, S as computeItemLayout, x as computePositionFromAnchor, y as continuousColorsLegendDefaults, E as renderContinuousColorLegendToCanvas, H as renderLegendToCanvas, j as useQuantizeColorScaleLegendData };","map":{"version":3,"mappings":"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","names":["SymbolCircle","x","y","size","fill","opacity","c","borderWidth","d","borderColor","_jsx","r","cx","cy","strokeWidth","stroke","style","pointerEvents","SymbolDiamond","transform","SymbolSquare","width","height","SymbolTriangle","continuousColorsLegendDefaults","length","thickness","direction","tickPosition","tickSize","tickSpacing","tickOverlap","tickFormat","value","titleAlign","titleOffset","zeroPadding","top","right","bottom","left","computeDimensions","item","itemsSpacing","_padding","padding","itemCount","itemWidth","itemHeight","Array","isArray","Error","horizontalPadding","verticalPadding","spacing","computePositionFromAnchor","anchor","translateX","translateY","containerWidth","containerHeight","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","justify","symbolSize","symbolSpacing","computeContinuousColorsLegend","values","scale","ticks","title","domain","reverse","positionScale","scaleLinear","range","thresholds","titleX","titleY","titleRotation","titleVerticalAlign","colorStops","computeContinuousColorScaleColorStops","formatValue","getValueFormatter","computedTicks","gradientY1","gradientX2","y1","y2","textY","textVerticalAlign","forEach","push","x1","x2","text","textX","textHorizontalAlign","gradientX1","gradientY2","titleText","titleHorizontalAlign","ContinuousColorsLegendSvg","theme","useTheme","id","map","stop","offset","join","_jsxs","colorStop","textAnchor","dominantBaseline","legends","tick","index","Fragment","line","AnchoredContinuousColorsLegendSvg","s","h","legendProps","symbolByShape","circle","diamond","square","triangle","LegendSvgItem","l","g","m","f","u","v","data","B","textColor","background","E","T","symbolShape","M","P","q","symbolBorderWidth","D","symbolBorderColor","onClick","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","handleMouseEnter","useCallback","event","filter","on","reduce","acc","effect","handleMouseLeave","isInteractive","some","handler","undefined","SymbolShape","itemOpacity","itemBackground","cursor","React","createElement","color","hidden","symbol","itemTextColor","userSelect","label","LegendSvg","itemDirection","b","xStep","yStep","i","BoxLegendSvg","a","textAlignMapping","start","middle","end","renderLegendToCanvas","ctx","O","save","translate","font","fontSize","fontFamily","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","renderContinuousColorLegendToCanvas","_ticks","initialStyles","gradient","createLinearGradient","addColorStop","stopColor","fontWeight","lineWidth","Number","axis","strokeStyle","lineCap","beginPath","moveTo","lineTo","rotate","degreesToRadians","useQuantizeColorScaleLegendData","overriddenDomain","valueFormat","separator","useMemo","items","domainValue","invertExtent","extent","LegendPropShape","PropTypes","arrayOf","object","oneOf","isRequired","number","string","oneOfType","func","shape"],"sources":["/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/legends/src/svg/symbols/SymbolCircle.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/legends/src/svg/symbols/SymbolDiamond.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/legends/src/svg/symbols/SymbolSquare.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/legends/src/svg/symbols/SymbolTriangle.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/legends/src/defaults.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/legends/src/compute.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/legends/src/svg/ContinuousColorsLegendSvg.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/legends/src/svg/AnchoredContinuousColorsLegendSvg.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/legends/src/svg/LegendSvgItem.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/legends/src/svg/LegendSvg.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/legends/src/svg/BoxLegendSvg.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/legends/src/canvas.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/legends/src/hooks.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/legends/src/props.ts"],"sourcesContent":["import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n","import { scaleLinear } from 'd3-scale'\nimport { getValueFormatter } from '@nivo/core'\nimport { computeContinuousColorScaleColorStops } from '@nivo/colors'\nimport {\n    BoxLegendSvgProps,\n    ContinuousColorsLegendProps,\n    LegendAnchor,\n    LegendItemDirection,\n} from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n\nexport const computeContinuousColorsLegend = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    // left to right for `row`, bottom to top for `column`\n    const domain = direction === 'column' ? [...scale.domain()].reverse() : scale.domain()\n\n    const positionScale = scaleLinear().domain(domain)\n    if (domain.length === 2) {\n        // sequential, quantize\n        positionScale.range([0, length])\n    } else if (domain.length === 3) {\n        // diverging\n        positionScale.range([0, length / 2, length])\n    }\n\n    let values: number[]\n    if ('thresholds' in scale) {\n        // quantize\n        values = [domain[0], ...scale.thresholds(), domain[1]]\n    } else {\n        // sequential, diverging\n        values = Array.isArray(ticks) ? ticks : (scale as any).ticks(ticks)\n    }\n\n    const colorStops = computeContinuousColorScaleColorStops(scale, 32)\n\n    const formatValue = getValueFormatter(tickFormat)\n\n    const computedTicks: {\n        x1: number\n        y1: number\n        x2: number\n        y2: number\n        text: string\n        textX: number\n        textY: number\n        textHorizontalAlign: 'start' | 'middle' | 'end'\n        textVerticalAlign: 'alphabetic' | 'central' | 'hanging'\n    }[] = []\n\n    let width: number\n    let height: number\n\n    const gradientX1 = 0\n    let gradientY1 = 0\n    let gradientX2 = 0\n    const gradientY2 = 0\n\n    let titleX: number\n    let titleY: number\n    let titleRotation: number\n    let titleVerticalAlign: 'alphabetic' | 'hanging'\n\n    if (direction === 'row') {\n        width = length\n        height = thickness\n\n        gradientX2 = 1\n\n        let y1: number\n        let y2: number\n\n        let textY: number\n        const textHorizontalAlign = 'middle'\n        let textVerticalAlign: 'alphabetic' | 'hanging'\n\n        titleRotation = 0\n        if (titleAlign === 'start') {\n            titleX = 0\n        } else if (titleAlign === 'middle') {\n            titleX = length / 2\n        } else {\n            titleX = length\n        }\n\n        if (tickPosition === 'before') {\n            y1 = -tickSize\n            y2 = tickOverlap ? thickness : 0\n\n            textY = -tickSize - tickSpacing\n            textVerticalAlign = 'alphabetic'\n\n            titleY = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            y1 = tickOverlap ? 0 : thickness\n            y2 = thickness + tickSize\n\n            textY = y2 + tickSpacing\n            textVerticalAlign = 'hanging'\n\n            titleY = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const x = positionScale(value)\n\n            computedTicks.push({\n                x1: x,\n                y1,\n                x2: x,\n                y2,\n                text: formatValue(value),\n                textX: x,\n                textY,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    } else {\n        width = thickness\n        height = length\n\n        gradientY1 = 1\n\n        let x1: number\n        let x2: number\n\n        let textX: number\n        let textHorizontalAlign: 'start' | 'end'\n        const textVerticalAlign = 'central'\n\n        titleRotation = -90\n        if (titleAlign === 'start') {\n            titleY = length\n        } else if (titleAlign === 'middle') {\n            titleY = length / 2\n        } else {\n            titleY = 0\n        }\n\n        if (tickPosition === 'before') {\n            x1 = -tickSize\n            x2 = tickOverlap ? thickness : 0\n\n            textX = x1 - tickSpacing\n            textHorizontalAlign = 'end'\n\n            titleX = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            x1 = tickOverlap ? 0 : thickness\n            x2 = thickness + tickSize\n\n            textX = x2 + tickSpacing\n            textHorizontalAlign = 'start'\n\n            titleX = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const y = positionScale(value)\n\n            computedTicks.push({\n                x1,\n                y1: y,\n                x2,\n                y2: y,\n                text: formatValue(value),\n                textX,\n                textY: y,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    }\n\n    return {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks: computedTicks,\n        titleText: title,\n        titleX,\n        titleY,\n        titleRotation,\n        titleHorizontalAlign: titleAlign,\n        titleVerticalAlign,\n    }\n}\n","import { Fragment } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { computeContinuousColorsLegend } from '../compute'\nimport { ContinuousColorsLegendProps } from '../types'\nimport { continuousColorsLegendDefaults } from '../defaults'\n\nexport const ContinuousColorsLegendSvg = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        ticks: computedTicks,\n        colorStops,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const theme = useTheme()\n\n    const id = `ContinuousColorsLegendSvgGradient.${direction}.${colorStops\n        .map(stop => stop.offset)\n        .join('_')}`\n\n    return (\n        <g>\n            <defs>\n                <linearGradient\n                    id={id}\n                    x1={gradientX1}\n                    y1={gradientY1}\n                    x2={gradientX2}\n                    y2={gradientY2}\n                >\n                    {colorStops.map(colorStop => (\n                        <stop {...colorStop} />\n                    ))}\n                </linearGradient>\n            </defs>\n            {titleText && (\n                <text\n                    transform={`translate(${titleX}, ${titleY}) rotate(${titleRotation})`}\n                    textAnchor={titleHorizontalAlign}\n                    dominantBaseline={titleVerticalAlign}\n                    style={theme.legends.title.text}\n                >\n                    {titleText}\n                </text>\n            )}\n            <rect width={width} height={height} fill={`url(#${id}`} />\n            {computedTicks.map((tick, index) => (\n                <Fragment key={index}>\n                    <line\n                        x1={tick.x1}\n                        y1={tick.y1}\n                        x2={tick.x2}\n                        y2={tick.y2}\n                        style={theme.legends.ticks.line}\n                    />\n                    <text\n                        x={tick.textX}\n                        y={tick.textY}\n                        textAnchor={tick.textHorizontalAlign}\n                        dominantBaseline={tick.textVerticalAlign}\n                        style={theme.legends.ticks.text}\n                    >\n                        {tick.text}\n                    </text>\n                </Fragment>\n            ))}\n        </g>\n    )\n}\n","import { AnchoredContinuousColorsLegendProps } from '../types'\nimport { computePositionFromAnchor } from '../compute'\nimport { continuousColorsLegendDefaults } from '../defaults'\nimport { ContinuousColorsLegendSvg } from './ContinuousColorsLegendSvg'\n\nexport const AnchoredContinuousColorsLegendSvg = ({\n    containerWidth,\n    containerHeight,\n    anchor,\n    translateX = 0,\n    translateY = 0,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    ...legendProps\n}: AnchoredContinuousColorsLegendProps) => {\n    let width: number\n    let height: number\n    if (direction === 'row') {\n        width = length\n        height = thickness\n    } else {\n        width = thickness\n        height = length\n    }\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <g transform={`translate(${x}, ${y})`}>\n            <ContinuousColorsLegendSvg\n                length={length}\n                thickness={thickness}\n                direction={direction}\n                {...legendProps}\n            />\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { CompleteTheme, degreesToRadians } from '@nivo/core'\nimport {\n    computeDimensions,\n    computePositionFromAnchor,\n    computeItemLayout,\n    computeContinuousColorsLegend,\n} from './compute'\nimport { AnchoredContinuousColorsLegendProps, LegendCanvasProps } from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n\nexport const renderContinuousColorLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        containerWidth,\n        containerHeight,\n        anchor,\n        translateX = 0,\n        translateY = 0,\n        scale,\n        length = continuousColorsLegendDefaults.length,\n        thickness = continuousColorsLegendDefaults.thickness,\n        direction = continuousColorsLegendDefaults.direction,\n        ticks: _ticks,\n        tickPosition = continuousColorsLegendDefaults.tickPosition,\n        tickSize = continuousColorsLegendDefaults.tickSize,\n        tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n        tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n        tickFormat = continuousColorsLegendDefaults.tickFormat,\n        title,\n        titleAlign = continuousColorsLegendDefaults.titleAlign,\n        titleOffset = continuousColorsLegendDefaults.titleOffset,\n        theme,\n    }: AnchoredContinuousColorsLegendProps & {\n        theme: CompleteTheme\n    }\n) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks: _ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const initialStyles = {\n        font: ctx.font,\n        textAlign: ctx.textAlign,\n        textBaseline: ctx.textBaseline,\n    }\n    ctx.save()\n\n    ctx.translate(x, y)\n\n    const gradient = ctx.createLinearGradient(\n        gradientX1 * width,\n        gradientY1 * height,\n        gradientX2 * width,\n        gradientY2 * height\n    )\n    colorStops.forEach(colorStop => {\n        gradient.addColorStop(colorStop.offset, colorStop.stopColor)\n    })\n\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.font = `${\n        theme.legends.ticks.text.fontWeight ? `${theme.legends.ticks.text.fontWeight} ` : ''\n    }${theme.legends.ticks.text.fontSize}px ${theme.legends.ticks.text.fontFamily}`\n\n    ticks.forEach(tick => {\n        if ((theme.legends.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n            ctx.lineCap = 'square'\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x1, tick.y1)\n            ctx.lineTo(tick.x2, tick.y2)\n            ctx.stroke()\n        }\n\n        if (theme.legends.ticks.text.fill) {\n            ctx.fillStyle = theme.legends.ticks.text.fill\n        }\n        ctx.textAlign = tick.textHorizontalAlign === 'middle' ? 'center' : tick.textHorizontalAlign\n        ctx.textBaseline = tick.textVerticalAlign === 'central' ? 'middle' : tick.textVerticalAlign\n\n        ctx.fillText(tick.text, tick.textX, tick.textY)\n    })\n\n    if (titleText) {\n        ctx.save()\n        ctx.translate(titleX, titleY)\n        ctx.rotate(degreesToRadians(titleRotation))\n\n        ctx.font = `${\n            theme.legends.title.text.fontWeight ? `${theme.legends.title.text.fontWeight} ` : ''\n        }${theme.legends.title.text.fontSize}px ${theme.legends.title.text.fontFamily}`\n        if (theme.legends.title.text.fill) {\n            ctx.fillStyle = theme.legends.title.text.fill\n        }\n        ctx.textAlign = titleHorizontalAlign === 'middle' ? 'center' : titleHorizontalAlign\n        ctx.textBaseline = titleVerticalAlign\n\n        ctx.fillText(titleText, 0, 0)\n\n        ctx.restore()\n    }\n\n    ctx.restore()\n\n    ctx.font = initialStyles.font\n    ctx.textAlign = initialStyles.textAlign\n    ctx.textBaseline = initialStyles.textBaseline\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n\n        if (reverse) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse, separator, valueFormat])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}