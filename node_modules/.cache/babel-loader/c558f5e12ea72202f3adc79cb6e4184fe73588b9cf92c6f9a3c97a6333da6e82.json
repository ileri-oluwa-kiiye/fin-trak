{"ast":null,"code":"import { Axes as e, Grid as a, renderGridLinesToCanvas as i, renderAxesToCanvas as t } from \"@nivo/axes\";\nimport { useAnnotations as n, Annotation as r, useComputedAnnotations as l, renderAnnotationsToCanvas as o } from \"@nivo/annotations\";\nimport { jsx as d, Fragment as u, jsxs as c } from \"react/jsx-runtime\";\nimport { BoxLegendSvg as s, renderLegendToCanvas as h } from \"@nivo/legends\";\nimport { useTheme as b, getPropertyAccessor as g, usePropertyAccessor as v, useValueFormatter as f, Container as m, useMotionConfig as p, useDimensions as x, bindDefs as y, CartesianMarkers as S, SvgWrapper as k, getRelativeCursor as L, isCursorInRect as w, ResponsiveWrapper as C } from \"@nivo/core\";\nimport { useMemo as V, createElement as W, useCallback as M, useState as B, Fragment as I, forwardRef as T, useRef as R, useEffect as H } from \"react\";\nimport { animated as P, to as E, useTransition as F } from \"@react-spring/web\";\nimport { useTooltip as X, BasicTooltip as Y } from \"@nivo/tooltip\";\nimport { useOrdinalColorScale as D, useInheritedColor as O } from \"@nivo/colors\";\nimport { computeScale as G } from \"@nivo/scales\";\nimport { stack as A, stackOffsetDiverging as j } from \"d3-shape\";\nimport q from \"lodash/uniqBy\";\nfunction z() {\n  return z = Object.assign || function (e) {\n    for (var a = 1; a < arguments.length; a++) {\n      var i = arguments[a];\n      for (var t in i) Object.prototype.hasOwnProperty.call(i, t) && (e[t] = i[t]);\n    }\n    return e;\n  }, z.apply(this, arguments);\n}\nfunction K(e, a) {\n  if (null == e) return {};\n  var i,\n    t,\n    n = {},\n    r = Object.keys(e);\n  for (t = 0; t < r.length; t++) i = r[t], a.indexOf(i) >= 0 || (n[i] = e[i]);\n  return n;\n}\nvar N,\n  J = function (e) {\n    var a = e.bars,\n      i = e.annotations,\n      t = n({\n        data: a,\n        annotations: i,\n        getPosition: function (e) {\n          return {\n            x: e.x + e.width / 2,\n            y: e.y + e.height / 2\n          };\n        },\n        getDimensions: function (e) {\n          var a = e.height,\n            i = e.width;\n          return {\n            width: i,\n            height: a,\n            size: Math.max(i, a)\n          };\n        }\n      });\n    return d(u, {\n      children: t.map(function (e, a) {\n        return d(r, z({}, e), a);\n      })\n    });\n  },\n  Q = function (e) {\n    var a = e.width,\n      i = e.height,\n      t = e.legends,\n      n = e.toggleSerie;\n    return d(u, {\n      children: t.map(function (e, t) {\n        var r,\n          l = e[0],\n          o = e[1];\n        return d(s, z({}, l, {\n          containerWidth: a,\n          containerHeight: i,\n          data: null != (r = l.data) ? r : o,\n          toggleSerie: l.toggleSerie && \"keys\" === l.dataFrom ? n : void 0\n        }), t);\n      })\n    });\n  },\n  U = [\"data\"],\n  Z = function (e) {\n    var a,\n      i = e.bar,\n      t = i.data,\n      n = K(i, U),\n      r = e.style,\n      l = r.borderColor,\n      o = r.color,\n      u = r.height,\n      s = r.labelColor,\n      h = r.labelOpacity,\n      g = r.labelX,\n      v = r.labelY,\n      f = r.transform,\n      m = r.width,\n      p = e.borderRadius,\n      x = e.borderWidth,\n      y = e.label,\n      S = e.shouldRenderLabel,\n      k = e.isInteractive,\n      L = e.onClick,\n      w = e.onMouseEnter,\n      C = e.onMouseLeave,\n      B = e.tooltip,\n      I = e.isFocusable,\n      T = e.ariaLabel,\n      R = e.ariaLabelledBy,\n      H = e.ariaDescribedBy,\n      F = b(),\n      Y = X(),\n      D = Y.showTooltipFromEvent,\n      O = Y.showTooltipAt,\n      G = Y.hideTooltip,\n      A = V(function () {\n        return function () {\n          return W(B, z({}, n, t));\n        };\n      }, [B, n, t]),\n      j = M(function (e) {\n        null == L || L(z({\n          color: n.color\n        }, t), e);\n      }, [n, t, L]),\n      q = M(function (e) {\n        return D(A(), e);\n      }, [D, A]),\n      N = M(function (e) {\n        null == w || w(t, e), D(A(), e);\n      }, [t, w, D, A]),\n      J = M(function (e) {\n        null == C || C(t, e), G();\n      }, [t, G, C]),\n      Q = M(function () {\n        O(A(), [n.absX + n.width / 2, n.absY]);\n      }, [O, A, n]),\n      Z = M(function () {\n        G();\n      }, [G]);\n    return c(P.g, {\n      transform: f,\n      children: [d(P.rect, {\n        width: E(m, function (e) {\n          return Math.max(e, 0);\n        }),\n        height: E(u, function (e) {\n          return Math.max(e, 0);\n        }),\n        rx: p,\n        ry: p,\n        fill: null != (a = t.fill) ? a : o,\n        strokeWidth: x,\n        stroke: l,\n        focusable: I,\n        tabIndex: I ? 0 : void 0,\n        \"aria-label\": T ? T(t) : void 0,\n        \"aria-labelledby\": R ? R(t) : void 0,\n        \"aria-describedby\": H ? H(t) : void 0,\n        onMouseEnter: k ? N : void 0,\n        onMouseMove: k ? q : void 0,\n        onMouseLeave: k ? J : void 0,\n        onClick: k ? j : void 0,\n        onFocus: k && I ? Q : void 0,\n        onBlur: k && I ? Z : void 0\n      }), S && d(P.text, {\n        x: g,\n        y: v,\n        textAnchor: \"middle\",\n        dominantBaseline: \"central\",\n        fillOpacity: h,\n        style: z({}, F.labels.text, {\n          pointerEvents: \"none\",\n          fill: s\n        }),\n        children: y\n      })]\n    });\n  },\n  $ = [\"color\", \"label\"],\n  _ = {\n    indexBy: \"id\",\n    keys: [\"value\"],\n    groupMode: \"stacked\",\n    layout: \"vertical\",\n    reverse: !1,\n    minValue: \"auto\",\n    maxValue: \"auto\",\n    valueScale: {\n      type: \"linear\"\n    },\n    indexScale: {\n      type: \"band\",\n      round: !0\n    },\n    padding: .1,\n    innerPadding: 0,\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: !1,\n    enableGridY: !0,\n    enableLabel: !0,\n    label: \"formattedValue\",\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: {\n      from: \"theme\",\n      theme: \"labels.text.fill\"\n    },\n    colorBy: \"id\",\n    colors: {\n      scheme: \"nivo\"\n    },\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: {\n      from: \"color\"\n    },\n    isInteractive: !0,\n    tooltip: function (e) {\n      var a = e.color,\n        i = e.label,\n        t = K(e, $);\n      return d(Y, {\n        id: i,\n        value: t.formattedValue,\n        enableChip: !0,\n        color: a\n      });\n    },\n    tooltipLabel: function (e) {\n      return e.id + \" - \" + e.indexValue;\n    },\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: []\n  },\n  ee = z({}, _, {\n    layers: [\"grid\", \"axes\", \"bars\", \"markers\", \"legends\", \"annotations\"],\n    barComponent: Z,\n    defs: [],\n    fill: [],\n    animate: !0,\n    motionConfig: \"default\",\n    role: \"img\",\n    isFocusable: !1\n  }),\n  ae = z({}, _, {\n    layers: [\"grid\", \"axes\", \"bars\", \"legends\", \"annotations\"],\n    pixelRatio: \"undefined\" != typeof window && null != (N = window.devicePixelRatio) ? N : 1\n  }),\n  ie = function (e, a, i, t, n, r) {\n    return G(t, {\n      all: e.map(a),\n      min: 0,\n      max: 0\n    }, n, r).padding(i);\n  },\n  te = function (e, a) {\n    return e.map(function (e) {\n      return z({}, a.reduce(function (e, a) {\n        return e[a] = null, e;\n      }, {}), e);\n    });\n  },\n  ne = function (e) {\n    return Object.keys(e).reduce(function (a, i) {\n      return e[i] && (a[i] = e[i]), a;\n    }, {});\n  },\n  re = function (e) {\n    return [e, Number(e)];\n  },\n  le = [\"layout\", \"minValue\", \"maxValue\", \"reverse\", \"width\", \"height\", \"padding\", \"innerPadding\", \"valueScale\", \"indexScale\", \"hiddenIds\"],\n  oe = function (e, a) {\n    return e > a;\n  },\n  de = function (e, a) {\n    return e < a;\n  },\n  ue = function (e, a) {\n    return Array.from(\" \".repeat(a - e), function (a, i) {\n      return e + i;\n    });\n  },\n  ce = function (e) {\n    return oe(e, 0) ? 0 : e;\n  },\n  se = function (e, a, i, t) {\n    var n = e.data,\n      r = e.formatValue,\n      l = e.getColor,\n      o = e.getIndex,\n      d = e.getTooltipLabel,\n      u = e.innerPadding,\n      c = void 0 === u ? 0 : u,\n      s = e.keys,\n      h = e.xScale,\n      b = e.yScale,\n      g = e.margin,\n      v = i ? de : oe,\n      f = n.map(ne),\n      m = [];\n    return s.forEach(function (e, i) {\n      return ue(0, h.domain().length).forEach(function (u) {\n        var s,\n          p,\n          x,\n          y = re(n[u][e]),\n          S = y[0],\n          k = y[1],\n          L = o(n[u]),\n          w = (null != (s = h(L)) ? s : 0) + a * i + c * i,\n          C = v(p = k, 0) ? null != (x = b(p)) ? x : 0 : t,\n          V = function (e, a) {\n            var i;\n            return v(e, 0) ? t - a : (null != (i = b(e)) ? i : 0) - t;\n          }(k, C),\n          W = {\n            id: e,\n            value: null === S ? S : k,\n            formattedValue: r(k),\n            hidden: !1,\n            index: u,\n            indexValue: L,\n            data: f[u]\n          };\n        m.push({\n          key: e + \".\" + W.indexValue,\n          index: m.length,\n          data: W,\n          x: w,\n          y: C,\n          absX: g.left + w,\n          absY: g.top + C,\n          width: a,\n          height: V,\n          color: l(W),\n          label: d(W)\n        });\n      });\n    }), m;\n  },\n  he = function (e, a, i, t) {\n    var n = e.data,\n      r = e.formatValue,\n      l = e.getIndex,\n      o = e.getColor,\n      d = e.getTooltipLabel,\n      u = e.keys,\n      c = e.innerPadding,\n      s = void 0 === c ? 0 : c,\n      h = e.xScale,\n      b = e.yScale,\n      g = e.margin,\n      v = i ? de : oe,\n      f = n.map(ne),\n      m = [];\n    return u.forEach(function (e, i) {\n      return ue(0, b.domain().length).forEach(function (u) {\n        var c,\n          p,\n          x,\n          y = re(n[u][e]),\n          S = y[0],\n          k = y[1],\n          L = l(n[u]),\n          w = v(p = k, 0) ? t : null != (x = h(p)) ? x : 0,\n          C = (null != (c = b(L)) ? c : 0) + a * i + s * i,\n          V = function (e, a) {\n            var i;\n            return v(e, 0) ? (null != (i = h(e)) ? i : 0) - t : t - a;\n          }(k, w),\n          W = {\n            id: e,\n            value: null === S ? S : k,\n            formattedValue: r(k),\n            hidden: !1,\n            index: u,\n            indexValue: L,\n            data: f[u]\n          };\n        m.push({\n          key: e + \".\" + W.indexValue,\n          index: m.length,\n          data: W,\n          x: w,\n          y: C,\n          absX: g.left + w,\n          absY: g.top + C,\n          width: V,\n          height: a,\n          color: o(W),\n          label: d(W)\n        });\n      });\n    }), m;\n  },\n  be = function (e) {\n    var a,\n      i,\n      t = e.layout,\n      n = e.minValue,\n      r = e.maxValue,\n      l = e.reverse,\n      o = e.width,\n      d = e.height,\n      u = e.padding,\n      c = void 0 === u ? 0 : u,\n      s = e.innerPadding,\n      h = void 0 === s ? 0 : s,\n      b = e.valueScale,\n      g = e.indexScale,\n      v = e.hiddenIds,\n      f = void 0 === v ? [] : v,\n      m = K(e, le),\n      p = m.keys.filter(function (e) {\n        return !f.includes(e);\n      }),\n      x = te(m.data, p),\n      y = \"vertical\" === t ? [\"y\", \"x\", o] : [\"x\", \"y\", d],\n      S = y[0],\n      k = y[1],\n      L = y[2],\n      w = ie(x, m.getIndex, c, g, L, k),\n      C = z({\n        max: r,\n        min: n,\n        reverse: l\n      }, b),\n      V = \"auto\" === C.min ? ce : function (e) {\n        return e;\n      },\n      W = x.reduce(function (e, a) {\n        return [].concat(e, p.map(function (e) {\n          return a[e];\n        }));\n      }, []).filter(Boolean),\n      M = V(Math.min.apply(Math, W)),\n      B = (i = Math.max.apply(Math, W), isFinite(i) ? i : 0),\n      I = G(C, {\n        all: W,\n        min: M,\n        max: B\n      }, \"x\" === S ? o : d, S),\n      T = \"vertical\" === t ? [w, I] : [I, w],\n      R = T[0],\n      H = T[1],\n      P = (w.bandwidth() - h * (p.length - 1)) / p.length,\n      E = [z({}, m, {\n        data: x,\n        keys: p,\n        innerPadding: h,\n        xScale: R,\n        yScale: H\n      }), P, C.reverse, null != (a = I(0)) ? a : 0];\n    return {\n      xScale: R,\n      yScale: H,\n      bars: P > 0 ? \"vertical\" === t ? se.apply(void 0, E) : he.apply(void 0, E) : []\n    };\n  },\n  ge = [\"data\", \"layout\", \"minValue\", \"maxValue\", \"reverse\", \"width\", \"height\", \"padding\", \"valueScale\", \"indexScale\", \"hiddenIds\"],\n  ve = function e(a) {\n    var i;\n    return a.some(Array.isArray) ? e((i = []).concat.apply(i, a)) : a;\n  },\n  fe = function (e, a, i) {\n    var t = e.formatValue,\n      n = e.getColor,\n      r = e.getIndex,\n      l = e.getTooltipLabel,\n      o = e.innerPadding,\n      d = e.stackedData,\n      u = e.xScale,\n      c = e.yScale,\n      s = e.margin,\n      h = [];\n    return d.forEach(function (e) {\n      return u.domain().forEach(function (d, b) {\n        var g,\n          v,\n          f = e[b],\n          m = null != (g = u(r(f.data))) ? g : 0,\n          p = (null != (v = function (e) {\n            return c(e[i ? 0 : 1]);\n          }(f)) ? v : 0) + .5 * o,\n          x = function (e, a) {\n            var t;\n            return (null != (t = c(e[i ? 1 : 0])) ? t : 0) - a;\n          }(f, p) - o,\n          y = re(f.data[e.key]),\n          S = y[0],\n          k = y[1],\n          L = {\n            id: e.key,\n            value: null === S ? S : k,\n            formattedValue: t(k),\n            hidden: !1,\n            index: b,\n            indexValue: d,\n            data: ne(f.data)\n          };\n        h.push({\n          key: e.key + \".\" + d,\n          index: h.length,\n          data: L,\n          x: m,\n          y: p,\n          absX: s.left + m,\n          absY: s.top + p,\n          width: a,\n          height: x,\n          color: n(L),\n          label: l(L)\n        });\n      });\n    }), h;\n  },\n  me = function (e, a, i) {\n    var t = e.formatValue,\n      n = e.getColor,\n      r = e.getIndex,\n      l = e.getTooltipLabel,\n      o = e.innerPadding,\n      d = e.stackedData,\n      u = e.xScale,\n      c = e.yScale,\n      s = e.margin,\n      h = [];\n    return d.forEach(function (e) {\n      return c.domain().forEach(function (d, b) {\n        var g,\n          v,\n          f = e[b],\n          m = null != (g = c(r(f.data))) ? g : 0,\n          p = (null != (v = function (e) {\n            return u(e[i ? 1 : 0]);\n          }(f)) ? v : 0) + .5 * o,\n          x = function (e, a) {\n            var t;\n            return (null != (t = u(e[i ? 0 : 1])) ? t : 0) - a;\n          }(f, p) - o,\n          y = re(f.data[e.key]),\n          S = y[0],\n          k = y[1],\n          L = {\n            id: e.key,\n            value: null === S ? S : k,\n            formattedValue: t(k),\n            hidden: !1,\n            index: b,\n            indexValue: d,\n            data: ne(f.data)\n          };\n        h.push({\n          key: e.key + \".\" + d,\n          index: h.length,\n          data: L,\n          x: p,\n          y: m,\n          absX: s.left + p,\n          absY: s.top + m,\n          width: x,\n          height: a,\n          color: n(L),\n          label: l(L)\n        });\n      });\n    }), h;\n  },\n  pe = function (e) {\n    var a,\n      i = e.data,\n      t = e.layout,\n      n = e.minValue,\n      r = e.maxValue,\n      l = e.reverse,\n      o = e.width,\n      d = e.height,\n      u = e.padding,\n      c = void 0 === u ? 0 : u,\n      s = e.valueScale,\n      h = e.indexScale,\n      b = e.hiddenIds,\n      g = void 0 === b ? [] : b,\n      v = K(e, ge),\n      f = v.keys.filter(function (e) {\n        return !g.includes(e);\n      }),\n      m = A().keys(f).offset(j)(te(i, f)),\n      p = \"vertical\" === t ? [\"y\", \"x\", o] : [\"x\", \"y\", d],\n      x = p[0],\n      y = p[1],\n      S = p[2],\n      k = ie(i, v.getIndex, c, h, S, y),\n      L = z({\n        max: r,\n        min: n,\n        reverse: l\n      }, s),\n      w = (a = ve(m), \"log\" === s.type ? a.filter(function (e) {\n        return 0 !== e;\n      }) : a),\n      C = Math.min.apply(Math, w),\n      V = Math.max.apply(Math, w),\n      W = G(L, {\n        all: w,\n        min: C,\n        max: V\n      }, \"x\" === x ? o : d, x),\n      M = \"vertical\" === t ? [k, W] : [W, k],\n      B = M[0],\n      I = M[1],\n      T = v.innerPadding > 0 ? v.innerPadding : 0,\n      R = k.bandwidth(),\n      H = [z({}, v, {\n        innerPadding: T,\n        stackedData: m,\n        xScale: B,\n        yScale: I\n      }), R, L.reverse];\n    return {\n      xScale: B,\n      yScale: I,\n      bars: R > 0 ? \"vertical\" === t ? fe.apply(void 0, H) : me.apply(void 0, H) : []\n    };\n  },\n  xe = function (e) {\n    var a = e.bars,\n      i = e.direction,\n      t = e.from,\n      n = e.groupMode,\n      r = e.layout,\n      l = e.legendLabel,\n      o = e.reverse,\n      d = g(null != l ? l : \"indexes\" === t ? \"indexValue\" : \"id\");\n    return \"indexes\" === t ? function (e, a, i) {\n      var t = q(e.map(function (e) {\n        var a, t;\n        return {\n          id: null != (a = e.data.indexValue) ? a : \"\",\n          label: i(e.data),\n          hidden: e.data.hidden,\n          color: null != (t = e.color) ? t : \"#000\"\n        };\n      }), function (e) {\n        return e.id;\n      });\n      return \"horizontal\" === a && t.reverse(), t;\n    }(a, r, d) : function (e, a, i, t, n, r) {\n      var l = q(e.map(function (e) {\n        var a;\n        return {\n          id: e.data.id,\n          label: r(e.data),\n          hidden: e.data.hidden,\n          color: null != (a = e.color) ? a : \"#000\"\n        };\n      }), function (e) {\n        return e.id;\n      });\n      return (\"vertical\" === a && \"stacked\" === t && \"column\" === i && !0 !== n || \"horizontal\" === a && \"stacked\" === t && !0 === n) && l.reverse(), l;\n    }(a, r, i, n, o, d);\n  },\n  ye = function (e) {\n    var a = e.indexBy,\n      i = void 0 === a ? _.indexBy : a,\n      t = e.keys,\n      n = void 0 === t ? _.keys : t,\n      r = e.label,\n      l = void 0 === r ? _.label : r,\n      o = e.tooltipLabel,\n      d = void 0 === o ? _.tooltipLabel : o,\n      u = e.valueFormat,\n      c = e.colors,\n      s = void 0 === c ? _.colors : c,\n      h = e.colorBy,\n      g = void 0 === h ? _.colorBy : h,\n      m = e.borderColor,\n      p = void 0 === m ? _.borderColor : m,\n      x = e.labelTextColor,\n      y = void 0 === x ? _.labelTextColor : x,\n      S = e.groupMode,\n      k = void 0 === S ? _.groupMode : S,\n      L = e.layout,\n      w = void 0 === L ? _.layout : L,\n      C = e.reverse,\n      W = void 0 === C ? _.reverse : C,\n      I = e.data,\n      T = e.minValue,\n      R = void 0 === T ? _.minValue : T,\n      H = e.maxValue,\n      P = void 0 === H ? _.maxValue : H,\n      E = e.margin,\n      F = e.width,\n      X = e.height,\n      Y = e.padding,\n      G = void 0 === Y ? _.padding : Y,\n      A = e.innerPadding,\n      j = void 0 === A ? _.innerPadding : A,\n      q = e.valueScale,\n      K = void 0 === q ? _.valueScale : q,\n      N = e.indexScale,\n      J = void 0 === N ? _.indexScale : N,\n      Q = e.initialHiddenIds,\n      U = void 0 === Q ? _.initialHiddenIds : Q,\n      Z = e.enableLabel,\n      $ = void 0 === Z ? _.enableLabel : Z,\n      ee = e.labelSkipWidth,\n      ae = void 0 === ee ? _.labelSkipWidth : ee,\n      ie = e.labelSkipHeight,\n      te = void 0 === ie ? _.labelSkipHeight : ie,\n      ne = e.legends,\n      re = void 0 === ne ? _.legends : ne,\n      le = e.legendLabel,\n      oe = B(null != U ? U : []),\n      de = oe[0],\n      ue = oe[1],\n      ce = M(function (e) {\n        ue(function (a) {\n          return a.indexOf(e) > -1 ? a.filter(function (a) {\n            return a !== e;\n          }) : [].concat(a, [e]);\n        });\n      }, []),\n      se = v(i),\n      he = v(l),\n      ge = v(d),\n      ve = f(u),\n      fe = b(),\n      me = D(s, g),\n      ye = O(p, fe),\n      Se = O(y, fe),\n      ke = (\"grouped\" === k ? be : pe)({\n        layout: w,\n        reverse: W,\n        data: I,\n        getIndex: se,\n        keys: n,\n        minValue: R,\n        maxValue: P,\n        width: F,\n        height: X,\n        getColor: me,\n        padding: G,\n        innerPadding: j,\n        valueScale: K,\n        indexScale: J,\n        hiddenIds: de,\n        formatValue: ve,\n        getTooltipLabel: ge,\n        margin: E\n      }),\n      Le = ke.bars,\n      we = ke.xScale,\n      Ce = ke.yScale,\n      Ve = V(function () {\n        return Le.filter(function (e) {\n          return null !== e.data.value;\n        }).map(function (e, a) {\n          return z({}, e, {\n            index: a\n          });\n        });\n      }, [Le]),\n      We = M(function (e) {\n        var a = e.width,\n          i = e.height;\n        return !!$ && !(ae > 0 && a < ae) && !(te > 0 && i < te);\n      }, [$, ae, te]),\n      Me = V(function () {\n        return n.map(function (e) {\n          var a = Le.find(function (a) {\n            return a.data.id === e;\n          });\n          return z({}, a, {\n            data: z({\n              id: e\n            }, null == a ? void 0 : a.data, {\n              hidden: de.includes(e)\n            })\n          });\n        });\n      }, [de, n, Le]),\n      Be = V(function () {\n        return re.map(function (e) {\n          return [e, xe({\n            bars: \"keys\" === e.dataFrom ? Me : Le,\n            direction: e.direction,\n            from: e.dataFrom,\n            groupMode: k,\n            layout: w,\n            legendLabel: le,\n            reverse: W\n          })];\n        });\n      }, [re, Me, Le, k, w, le, W]);\n    return {\n      bars: Le,\n      barsWithValue: Ve,\n      xScale: we,\n      yScale: Ce,\n      getIndex: se,\n      getLabel: he,\n      getTooltipLabel: ge,\n      formatValue: ve,\n      getColor: me,\n      getBorderColor: ye,\n      getLabelColor: Se,\n      shouldRenderBarLabel: We,\n      hiddenIds: de,\n      toggleSerie: ce,\n      legendsWithData: Be\n    };\n  },\n  Se = [\"isInteractive\", \"animate\", \"motionConfig\", \"theme\", \"renderWrapper\"],\n  ke = function (i) {\n    var t = i.data,\n      n = i.indexBy,\n      r = i.keys,\n      l = i.margin,\n      o = i.width,\n      u = i.height,\n      c = i.groupMode,\n      s = i.layout,\n      h = i.reverse,\n      b = i.minValue,\n      g = i.maxValue,\n      v = i.valueScale,\n      f = i.indexScale,\n      m = i.padding,\n      L = i.innerPadding,\n      w = i.axisTop,\n      C = i.axisRight,\n      M = i.axisBottom,\n      B = void 0 === M ? ee.axisBottom : M,\n      T = i.axisLeft,\n      R = void 0 === T ? ee.axisLeft : T,\n      H = i.enableGridX,\n      P = void 0 === H ? ee.enableGridX : H,\n      E = i.enableGridY,\n      X = void 0 === E ? ee.enableGridY : E,\n      Y = i.gridXValues,\n      D = i.gridYValues,\n      O = i.layers,\n      G = void 0 === O ? ee.layers : O,\n      A = i.barComponent,\n      j = void 0 === A ? ee.barComponent : A,\n      q = i.enableLabel,\n      K = void 0 === q ? ee.enableLabel : q,\n      N = i.label,\n      U = i.labelSkipWidth,\n      Z = void 0 === U ? ee.labelSkipWidth : U,\n      $ = i.labelSkipHeight,\n      _ = void 0 === $ ? ee.labelSkipHeight : $,\n      ae = i.labelTextColor,\n      ie = i.markers,\n      te = void 0 === ie ? ee.markers : ie,\n      ne = i.colorBy,\n      re = i.colors,\n      le = i.defs,\n      oe = void 0 === le ? ee.defs : le,\n      de = i.fill,\n      ue = void 0 === de ? ee.fill : de,\n      ce = i.borderRadius,\n      se = void 0 === ce ? ee.borderRadius : ce,\n      he = i.borderWidth,\n      be = void 0 === he ? ee.borderWidth : he,\n      ge = i.borderColor,\n      ve = i.annotations,\n      fe = void 0 === ve ? ee.annotations : ve,\n      me = i.legendLabel,\n      pe = i.tooltipLabel,\n      xe = i.valueFormat,\n      Se = i.isInteractive,\n      ke = void 0 === Se ? ee.isInteractive : Se,\n      Le = i.tooltip,\n      we = void 0 === Le ? ee.tooltip : Le,\n      Ce = i.onClick,\n      Ve = i.onMouseEnter,\n      We = i.onMouseLeave,\n      Me = i.legends,\n      Be = i.role,\n      Ie = void 0 === Be ? ee.role : Be,\n      Te = i.ariaLabel,\n      Re = i.ariaLabelledBy,\n      He = i.ariaDescribedBy,\n      Pe = i.isFocusable,\n      Ee = void 0 === Pe ? ee.isFocusable : Pe,\n      Fe = i.barAriaLabel,\n      Xe = i.barAriaLabelledBy,\n      Ye = i.barAriaDescribedBy,\n      De = i.initialHiddenIds,\n      Oe = p(),\n      Ge = Oe.animate,\n      Ae = Oe.config,\n      je = x(o, u, l),\n      qe = je.outerWidth,\n      ze = je.outerHeight,\n      Ke = je.margin,\n      Ne = je.innerWidth,\n      Je = je.innerHeight,\n      Qe = ye({\n        indexBy: n,\n        label: N,\n        tooltipLabel: pe,\n        valueFormat: xe,\n        colors: re,\n        colorBy: ne,\n        borderColor: ge,\n        labelTextColor: ae,\n        groupMode: c,\n        layout: s,\n        reverse: h,\n        data: t,\n        keys: r,\n        minValue: b,\n        maxValue: g,\n        margin: Ke,\n        width: Ne,\n        height: Je,\n        padding: m,\n        innerPadding: L,\n        valueScale: v,\n        indexScale: f,\n        enableLabel: K,\n        labelSkipWidth: Z,\n        labelSkipHeight: _,\n        legends: Me,\n        legendLabel: me,\n        initialHiddenIds: De\n      }),\n      Ue = Qe.bars,\n      Ze = Qe.barsWithValue,\n      $e = Qe.xScale,\n      _e = Qe.yScale,\n      ea = Qe.getLabel,\n      aa = Qe.getTooltipLabel,\n      ia = Qe.getBorderColor,\n      ta = Qe.getLabelColor,\n      na = Qe.shouldRenderBarLabel,\n      ra = Qe.toggleSerie,\n      la = Qe.legendsWithData,\n      oa = F(Ze, {\n        keys: function (e) {\n          return e.key;\n        },\n        from: function (e) {\n          return z({\n            borderColor: ia(e),\n            color: e.color,\n            height: 0,\n            labelColor: ta(e),\n            labelOpacity: 0,\n            labelX: e.width / 2,\n            labelY: e.height / 2,\n            transform: \"translate(\" + e.x + \", \" + (e.y + e.height) + \")\",\n            width: e.width\n          }, \"vertical\" === s ? {} : {\n            height: e.height,\n            transform: \"translate(\" + e.x + \", \" + e.y + \")\",\n            width: 0\n          });\n        },\n        enter: function (e) {\n          return {\n            borderColor: ia(e),\n            color: e.color,\n            height: e.height,\n            labelColor: ta(e),\n            labelOpacity: 1,\n            labelX: e.width / 2,\n            labelY: e.height / 2,\n            transform: \"translate(\" + e.x + \", \" + e.y + \")\",\n            width: e.width\n          };\n        },\n        update: function (e) {\n          return {\n            borderColor: ia(e),\n            color: e.color,\n            height: e.height,\n            labelColor: ta(e),\n            labelOpacity: 1,\n            labelX: e.width / 2,\n            labelY: e.height / 2,\n            transform: \"translate(\" + e.x + \", \" + e.y + \")\",\n            width: e.width\n          };\n        },\n        leave: function (e) {\n          return z({\n            borderColor: ia(e),\n            color: e.color,\n            height: 0,\n            labelColor: ta(e),\n            labelOpacity: 0,\n            labelX: e.width / 2,\n            labelY: 0,\n            transform: \"translate(\" + e.x + \", \" + (e.y + e.height) + \")\",\n            width: e.width\n          }, \"vertical\" === s ? {} : {\n            labelX: 0,\n            labelY: e.height / 2,\n            height: e.height,\n            transform: \"translate(\" + e.x + \", \" + e.y + \")\",\n            width: 0\n          });\n        },\n        config: Ae,\n        immediate: !Ge\n      }),\n      da = V(function () {\n        return {\n          borderRadius: se,\n          borderWidth: be,\n          enableLabel: K,\n          isInteractive: ke,\n          labelSkipWidth: Z,\n          labelSkipHeight: _,\n          onClick: Ce,\n          onMouseEnter: Ve,\n          onMouseLeave: We,\n          getTooltipLabel: aa,\n          tooltip: we,\n          isFocusable: Ee,\n          ariaLabel: Fe,\n          ariaLabelledBy: Xe,\n          ariaDescribedBy: Ye\n        };\n      }, [se, be, K, aa, ke, _, Z, Ce, Ve, We, we, Ee, Fe, Xe, Ye]),\n      ua = y(oe, Ue, ue, {\n        dataKey: \"data\",\n        targetKey: \"data.fill\"\n      }),\n      ca = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null\n      };\n    G.includes(\"annotations\") && (ca.annotations = d(J, {\n      bars: Ue,\n      annotations: fe\n    }, \"annotations\")), G.includes(\"axes\") && (ca.axes = d(e, {\n      xScale: $e,\n      yScale: _e,\n      width: Ne,\n      height: Je,\n      top: w,\n      right: C,\n      bottom: B,\n      left: R\n    }, \"axes\")), G.includes(\"bars\") && (ca.bars = d(I, {\n      children: oa(function (e, a) {\n        return W(j, z({}, da, {\n          bar: a,\n          style: e,\n          shouldRenderLabel: na(a),\n          label: ea(a.data)\n        }));\n      })\n    }, \"bars\")), G.includes(\"grid\") && (ca.grid = d(a, {\n      width: Ne,\n      height: Je,\n      xScale: P ? $e : null,\n      yScale: X ? _e : null,\n      xValues: Y,\n      yValues: D\n    }, \"grid\")), G.includes(\"legends\") && (ca.legends = d(Q, {\n      width: Ne,\n      height: Je,\n      legends: la,\n      toggleSerie: ra\n    }, \"legends\")), G.includes(\"markers\") && (ca.markers = d(S, {\n      markers: te,\n      width: Ne,\n      height: Je,\n      xScale: $e,\n      yScale: _e\n    }, \"markers\"));\n    var sa = V(function () {\n      return z({}, da, {\n        margin: Ke,\n        width: o,\n        height: u,\n        innerWidth: Ne,\n        innerHeight: Je,\n        bars: Ue,\n        legendData: la,\n        enableLabel: K,\n        xScale: $e,\n        yScale: _e,\n        tooltip: we,\n        getTooltipLabel: aa,\n        onClick: Ce,\n        onMouseEnter: Ve,\n        onMouseLeave: We\n      });\n    }, [da, Ke, o, u, Ne, Je, Ue, la, K, $e, _e, we, aa, Ce, Ve, We]);\n    return d(k, {\n      width: qe,\n      height: ze,\n      margin: Ke,\n      defs: ua,\n      role: Ie,\n      ariaLabel: Te,\n      ariaLabelledBy: Re,\n      ariaDescribedBy: He,\n      isFocusable: Ee,\n      children: G.map(function (e, a) {\n        var i;\n        return \"function\" == typeof e ? d(I, {\n          children: W(e, sa)\n        }, a) : null != (i = null == ca ? void 0 : ca[e]) ? i : null;\n      })\n    });\n  },\n  Le = function (e) {\n    var a = e.isInteractive,\n      i = void 0 === a ? ee.isInteractive : a,\n      t = e.animate,\n      n = void 0 === t ? ee.animate : t,\n      r = e.motionConfig,\n      l = void 0 === r ? ee.motionConfig : r,\n      o = e.theme,\n      u = e.renderWrapper,\n      c = K(e, Se);\n    return d(m, {\n      animate: n,\n      isInteractive: i,\n      motionConfig: l,\n      renderWrapper: u,\n      theme: o,\n      children: d(ke, z({\n        isInteractive: i\n      }, c))\n    });\n  },\n  we = [\"isInteractive\", \"renderWrapper\", \"theme\"],\n  Ce = function (e, a, i, t) {\n    return e.find(function (e) {\n      return w(e.x + a.left, e.y + a.top, e.width, e.height, i, t);\n    });\n  },\n  Ve = function (e) {\n    var a = e.data,\n      r = e.indexBy,\n      u = e.keys,\n      c = e.margin,\n      s = e.width,\n      g = e.height,\n      v = e.groupMode,\n      f = e.layout,\n      m = e.reverse,\n      p = e.minValue,\n      y = e.maxValue,\n      S = e.valueScale,\n      k = e.indexScale,\n      w = e.padding,\n      C = e.innerPadding,\n      B = e.axisTop,\n      I = e.axisRight,\n      T = e.axisBottom,\n      P = void 0 === T ? ae.axisBottom : T,\n      E = e.axisLeft,\n      F = void 0 === E ? ae.axisLeft : E,\n      Y = e.enableGridX,\n      D = void 0 === Y ? ae.enableGridX : Y,\n      O = e.enableGridY,\n      G = void 0 === O ? ae.enableGridY : O,\n      A = e.gridXValues,\n      j = e.gridYValues,\n      q = e.layers,\n      K = void 0 === q ? ae.layers : q,\n      N = e.renderBar,\n      J = void 0 === N ? function (e, a) {\n        var i = a.bar,\n          t = i.color,\n          n = i.height,\n          r = i.width,\n          l = i.x,\n          o = i.y,\n          d = a.borderColor,\n          u = a.borderRadius,\n          c = a.borderWidth,\n          s = a.label,\n          h = a.labelColor,\n          b = a.shouldRenderLabel;\n        if (e.fillStyle = t, c > 0 && (e.strokeStyle = d, e.lineWidth = c), e.beginPath(), u > 0) {\n          var g = Math.min(u, n);\n          e.moveTo(l + g, o), e.lineTo(l + r - g, o), e.quadraticCurveTo(l + r, o, l + r, o + g), e.lineTo(l + r, o + n - g), e.quadraticCurveTo(l + r, o + n, l + r - g, o + n), e.lineTo(l + g, o + n), e.quadraticCurveTo(l, o + n, l, o + n - g), e.lineTo(l, o + g), e.quadraticCurveTo(l, o, l + g, o), e.closePath();\n        } else e.rect(l, o, r, n);\n        e.fill(), c > 0 && e.stroke(), b && (e.textBaseline = \"middle\", e.textAlign = \"center\", e.fillStyle = h, e.fillText(s, l + r / 2, o + n / 2));\n      } : N,\n      Q = e.enableLabel,\n      U = void 0 === Q ? ae.enableLabel : Q,\n      Z = e.label,\n      $ = e.labelSkipWidth,\n      _ = void 0 === $ ? ae.labelSkipWidth : $,\n      ee = e.labelSkipHeight,\n      ie = void 0 === ee ? ae.labelSkipHeight : ee,\n      te = e.labelTextColor,\n      ne = e.colorBy,\n      re = e.colors,\n      le = e.borderRadius,\n      oe = void 0 === le ? ae.borderRadius : le,\n      de = e.borderWidth,\n      ue = void 0 === de ? ae.borderWidth : de,\n      ce = e.borderColor,\n      se = e.annotations,\n      he = void 0 === se ? ae.annotations : se,\n      be = e.legendLabel,\n      ge = e.tooltipLabel,\n      ve = e.valueFormat,\n      fe = e.isInteractive,\n      me = void 0 === fe ? ae.isInteractive : fe,\n      pe = e.tooltip,\n      xe = void 0 === pe ? ae.tooltip : pe,\n      Se = e.onClick,\n      ke = e.onMouseEnter,\n      Le = e.onMouseLeave,\n      we = e.legends,\n      Ve = e.pixelRatio,\n      We = void 0 === Ve ? ae.pixelRatio : Ve,\n      Me = e.canvasRef,\n      Be = R(null),\n      Ie = b(),\n      Te = x(s, g, c),\n      Re = Te.margin,\n      He = Te.innerWidth,\n      Pe = Te.innerHeight,\n      Ee = Te.outerWidth,\n      Fe = Te.outerHeight,\n      Xe = ye({\n        indexBy: r,\n        label: Z,\n        tooltipLabel: ge,\n        valueFormat: ve,\n        colors: re,\n        colorBy: ne,\n        borderColor: ce,\n        labelTextColor: te,\n        groupMode: v,\n        layout: f,\n        reverse: m,\n        data: a,\n        keys: u,\n        minValue: p,\n        maxValue: y,\n        margin: Re,\n        width: He,\n        height: Pe,\n        padding: w,\n        innerPadding: C,\n        valueScale: S,\n        indexScale: k,\n        enableLabel: U,\n        labelSkipWidth: _,\n        labelSkipHeight: ie,\n        legends: we,\n        legendLabel: be\n      }),\n      Ye = Xe.bars,\n      De = Xe.barsWithValue,\n      Oe = Xe.xScale,\n      Ge = Xe.yScale,\n      Ae = Xe.getLabel,\n      je = Xe.getTooltipLabel,\n      qe = Xe.getBorderColor,\n      ze = Xe.getLabelColor,\n      Ke = Xe.shouldRenderBarLabel,\n      Ne = Xe.legendsWithData,\n      Je = X(),\n      Qe = Je.showTooltipFromEvent,\n      Ue = Je.hideTooltip,\n      Ze = l({\n        annotations: n({\n          data: Ye,\n          annotations: he,\n          getPosition: function (e) {\n            return {\n              x: e.x,\n              y: e.y\n            };\n          },\n          getDimensions: function (e) {\n            var a = e.width,\n              i = e.height;\n            return {\n              width: a,\n              height: i,\n              size: Math.max(a, i)\n            };\n          }\n        })\n      }),\n      $e = V(function () {\n        return {\n          borderRadius: oe,\n          borderWidth: ue,\n          isInteractive: me,\n          isFocusable: !1,\n          labelSkipWidth: _,\n          labelSkipHeight: ie,\n          margin: Re,\n          width: s,\n          height: g,\n          innerWidth: He,\n          innerHeight: Pe,\n          bars: Ye,\n          legendData: Ne,\n          enableLabel: U,\n          xScale: Oe,\n          yScale: Ge,\n          tooltip: xe,\n          getTooltipLabel: je,\n          onClick: Se,\n          onMouseEnter: ke,\n          onMouseLeave: Le\n        };\n      }, [oe, ue, me, _, ie, Re, s, g, He, Pe, Ye, Ne, U, Oe, Ge, xe, je, Se, ke, Le]);\n    H(function () {\n      var e,\n        a = null == (e = Be.current) ? void 0 : e.getContext(\"2d\");\n      Be.current && a && (Be.current.width = Ee * We, Be.current.height = Fe * We, a.scale(We, We), a.fillStyle = Ie.background, a.fillRect(0, 0, Ee, Fe), a.translate(Re.left, Re.top), K.forEach(function (e) {\n        \"grid\" === e ? \"number\" == typeof Ie.grid.line.strokeWidth && Ie.grid.line.strokeWidth > 0 && (a.lineWidth = Ie.grid.line.strokeWidth, a.strokeStyle = Ie.grid.line.stroke, D && i(a, {\n          width: s,\n          height: g,\n          scale: Oe,\n          axis: \"x\",\n          values: A\n        }), G && i(a, {\n          width: s,\n          height: g,\n          scale: Ge,\n          axis: \"y\",\n          values: j\n        })) : \"axes\" === e ? t(a, {\n          xScale: Oe,\n          yScale: Ge,\n          width: He,\n          height: Pe,\n          top: B,\n          right: I,\n          bottom: P,\n          left: F,\n          theme: Ie\n        }) : \"bars\" === e ? De.forEach(function (e) {\n          J(a, {\n            bar: e,\n            borderColor: qe(e),\n            borderRadius: oe,\n            borderWidth: ue,\n            label: Ae(e.data),\n            labelColor: ze(e),\n            shouldRenderLabel: Ke(e)\n          });\n        }) : \"legends\" === e ? Ne.forEach(function (e) {\n          var i = e[0],\n            t = e[1];\n          h(a, z({}, i, {\n            data: t,\n            containerWidth: He,\n            containerHeight: Pe,\n            theme: Ie\n          }));\n        }) : \"annotations\" === e ? o(a, {\n          annotations: Ze,\n          theme: Ie\n        }) : \"function\" == typeof e && e(a, $e);\n      }), a.save());\n    }, [P, F, I, B, De, oe, ue, Ze, D, G, qe, Ae, ze, A, j, v, g, Pe, He, $e, K, f, Ne, Re.left, Re.top, Fe, Ee, We, J, Oe, Ge, m, Ke, Ie, s]);\n    var _e = M(function (e) {\n        if (Ye && Be.current) {\n          var a = L(Be.current, e),\n            i = a[0],\n            t = a[1],\n            n = Ce(Ye, Re, i, t);\n          void 0 !== n ? (Qe(W(xe, z({}, n.data, {\n            color: n.color,\n            label: n.label,\n            value: Number(n.data.value)\n          })), e), \"mouseenter\" === e.type && (null == ke || ke(n.data, e))) : Ue();\n        }\n      }, [Ue, Re, ke, Ye, Qe, xe]),\n      ea = M(function (e) {\n        if (Ye && Be.current) {\n          Ue();\n          var a = L(Be.current, e),\n            i = a[0],\n            t = a[1],\n            n = Ce(Ye, Re, i, t);\n          n && (null == Le || Le(n.data, e));\n        }\n      }, [Ue, Re, Le, Ye]),\n      aa = M(function (e) {\n        if (Ye && Be.current) {\n          var a = L(Be.current, e),\n            i = a[0],\n            t = a[1],\n            n = Ce(Ye, Re, i, t);\n          void 0 !== n && (null == Se || Se(z({}, n.data, {\n            color: n.color\n          }), e));\n        }\n      }, [Re, Se, Ye]);\n    return d(\"canvas\", {\n      ref: function (e) {\n        Be.current = e, Me && \"current\" in Me && (Me.current = e);\n      },\n      width: Ee * We,\n      height: Fe * We,\n      style: {\n        width: Ee,\n        height: Fe,\n        cursor: me ? \"auto\" : \"normal\"\n      },\n      onMouseEnter: me ? _e : void 0,\n      onMouseMove: me ? _e : void 0,\n      onMouseLeave: me ? ea : void 0,\n      onClick: me ? aa : void 0\n    });\n  },\n  We = T(function (e, a) {\n    var i = e.isInteractive,\n      t = e.renderWrapper,\n      n = e.theme,\n      r = K(e, we);\n    return d(m, {\n      isInteractive: i,\n      renderWrapper: t,\n      theme: n,\n      animate: !1,\n      children: d(Ve, z({}, r, {\n        canvasRef: a\n      }))\n    });\n  }),\n  Me = function (e) {\n    return d(C, {\n      children: function (a) {\n        var i = a.width,\n          t = a.height;\n        return d(Le, z({\n          width: i,\n          height: t\n        }, e));\n      }\n    });\n  },\n  Be = T(function (e, a) {\n    return d(C, {\n      children: function (i) {\n        var t = i.width,\n          n = i.height;\n        return d(We, z({\n          width: t,\n          height: n\n        }, e, {\n          ref: a\n        }));\n      }\n    });\n  });\nexport { Le as Bar, We as BarCanvas, Z as BarItem, Me as ResponsiveBar, Be as ResponsiveBarCanvas, ae as canvasDefaultProps, _ as defaultProps, ee as svgDefaultProps };","map":{"version":3,"mappings":"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","names":["BarAnnotations","bars","annotations","boundAnnotations","useAnnotations","data","getPosition","bar","x","width","y","height","getDimensions","size","Math","max","_jsx","map","annotation","i","Annotation","BarLegends","legends","toggleSerie","legend","BoxLegendSvg","containerWidth","containerHeight","dataFrom","undefined","BarItem","style","borderColor","color","labelColor","labelOpacity","labelX","labelY","transform","borderRadius","borderWidth","label","shouldRenderLabel","isInteractive","onClick","onMouseEnter","onMouseLeave","tooltip","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","theme","useTheme","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","_jsxs","animated","g","rect","to","value","rx","ry","fill","strokeWidth","stroke","focusable","tabIndex","onMouseMove","onFocus","onBlur","text","textAnchor","dominantBaseline","fillOpacity","labels","pointerEvents","defaultProps","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","from","colorBy","colors","scheme","BasicTooltip","id","formattedValue","enableChip","tooltipLabel","datum","indexValue","initialHiddenIds","markers","svgDefaultProps","layers","barComponent","defs","animate","motionConfig","role","canvasDefaultProps","pixelRatio","window","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","min","normalizeData","item","reduce","acc","key","filterNullValues","Object","coerceValue","Number","gt","other","lt","range","start","end","Array","repeat","_","index","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","xScale","yScale","margin","compare","cleanedData","forEach","domain","length","d","rawValue","barHeight","getHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","getWidth","generateGroupedBars","s","indexScaleConfig","hiddenIds","props","filter","includes","otherAxis","scaleSpec","clampMin","values","entry","k","Boolean","isFinite","scale","bandwidth","params","ge","flattenDeep","arr","some","isArray","concat","generateVerticalStackedBars","stackedData","stackedDataItem","getY","generateHorizontalStackedBars","getX","generateStackedBars","array","stack","offset","stackOffsetDiverging","num","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","_uniqBy","getLegendDataForIndexes","getLegendDataForKeys","useBar","valueFormat","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","InnerBar","partialMargin","axisTop","axisRight","gridXValues","gridYValues","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","useMotionConfig","springConfig","config","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","transition","useTransition","enter","update","leave","immediate","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","Bar","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","node","isCursorInRect","InnerBarCanvas","renderBar","ctx","fillStyle","strokeStyle","lineWidth","beginPath","radius","moveTo","lineTo","quadraticCurveTo","closePath","textBaseline","textAlign","fillText","Q","canvasRef","canvasEl","useRef","useComputedAnnotations","useEffect","current","_canvasEl$current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","renderLegendToCanvas","renderAnnotationsToCanvas","save","handleMouseHover","getRelativeCursor","ref","canvas","cursor","BarCanvas","forwardRef","children","ResponsiveBar","ResponsiveWrapper","ResponsiveBarCanvas"],"sources":["/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/bar/src/BarAnnotations.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/bar/src/BarLegends.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/bar/src/BarItem.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/bar/src/props.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/bar/src/BarTooltip.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/bar/src/compute/common.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/bar/src/compute/grouped.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/bar/src/compute/stacked.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/bar/src/compute/legends.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/bar/src/hooks.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/bar/src/Bar.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/bar/src/BarCanvas.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/bar/src/ResponsiveBar.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/bar/src/ResponsiveBarCanvas.tsx"],"sourcesContent":["import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'markers', 'legends', 'annotations'],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'legends', 'annotations'],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: RawDatum[], keys: string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport { uniqBy } from 'lodash'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n    }\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: Omit<BarSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: Omit<BarCanvasProps<RawDatum>, 'height' | 'width'>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}