{"ast":null,"code":"import { memo as t, useRef as i, useMemo as o, createContext as n, useState as r, useCallback as e, useContext as l } from \"react\";\nimport { useSpring as a, animated as c } from \"@react-spring/web\";\nimport { useTheme as h, useMotionConfig as s, useMeasure as d, useValueFormatter as u } from \"@nivo/core\";\nimport { jsx as y, jsxs as p, Fragment as f } from \"react/jsx-runtime\";\nfunction v() {\n  return v = Object.assign || function (t) {\n    for (var i = 1; i < arguments.length; i++) {\n      var o = arguments[i];\n      for (var n in o) Object.prototype.hasOwnProperty.call(o, n) && (t[n] = o[n]);\n    }\n    return t;\n  }, v.apply(this, arguments);\n}\nvar x = {\n    pointerEvents: \"none\",\n    position: \"absolute\",\n    zIndex: 10,\n    top: 0,\n    left: 0\n  },\n  m = function (t, i) {\n    return \"translate(\" + t + \"px, \" + i + \"px)\";\n  },\n  g = t(function (t) {\n    var o,\n      n = t.position,\n      r = t.anchor,\n      e = t.children,\n      l = h(),\n      u = s(),\n      p = u.animate,\n      f = u.config,\n      g = d(),\n      b = g[0],\n      w = g[1],\n      T = i(!1),\n      C = void 0,\n      E = !1,\n      P = w.width > 0 && w.height > 0,\n      N = Math.round(n[0]),\n      V = Math.round(n[1]);\n    P && (\"top\" === r ? (N -= w.width / 2, V -= w.height + 14) : \"right\" === r ? (N += 14, V -= w.height / 2) : \"bottom\" === r ? (N -= w.width / 2, V += 14) : \"left\" === r ? (N -= w.width + 14, V -= w.height / 2) : \"center\" === r && (N -= w.width / 2, V -= w.height / 2), C = {\n      transform: m(N, V)\n    }, T.current || (E = !0), T.current = [N, V]);\n    var j = a({\n        to: C,\n        config: f,\n        immediate: !p || E\n      }),\n      O = v({}, x, l.tooltip, {\n        transform: null != (o = j.transform) ? o : m(N, V)\n      });\n    return y(c.div, {\n      ref: b,\n      style: O,\n      children: e\n    });\n  });\ng.displayName = \"TooltipWrapper\";\nvar b = t(function (t) {\n    var i = t.size,\n      o = void 0 === i ? 12 : i,\n      n = t.color,\n      r = t.style;\n    return y(\"span\", {\n      style: v({\n        display: \"block\",\n        width: o,\n        height: o,\n        background: n\n      }, void 0 === r ? {} : r)\n    });\n  }),\n  w = t(function (t) {\n    var i,\n      o = t.id,\n      n = t.value,\n      r = t.format,\n      e = t.enableChip,\n      l = void 0 !== e && e,\n      a = t.color,\n      c = t.renderContent,\n      s = h(),\n      d = u(r);\n    if (\"function\" == typeof c) i = c();else {\n      var f = n;\n      void 0 !== d && void 0 !== f && (f = d(f)), i = p(\"div\", {\n        style: s.tooltip.basic,\n        children: [l && y(b, {\n          color: a,\n          style: s.tooltip.chip\n        }), void 0 !== f ? p(\"span\", {\n          children: [o, \": \", y(\"strong\", {\n            children: \"\" + f\n          })]\n        }) : o]\n      });\n    }\n    return y(\"div\", {\n      style: s.tooltip.container,\n      children: i\n    });\n  }),\n  T = {\n    width: \"100%\",\n    borderCollapse: \"collapse\"\n  },\n  C = t(function (t) {\n    var i,\n      o = t.title,\n      n = t.rows,\n      r = void 0 === n ? [] : n,\n      e = t.renderContent,\n      l = h();\n    return r.length ? (i = \"function\" == typeof e ? e() : p(\"div\", {\n      children: [o && o, y(\"table\", {\n        style: v({}, T, l.tooltip.table),\n        children: y(\"tbody\", {\n          children: r.map(function (t, i) {\n            return y(\"tr\", {\n              children: t.map(function (t, i) {\n                return y(\"td\", {\n                  style: l.tooltip.tableCell,\n                  children: t\n                }, i);\n              })\n            }, i);\n          })\n        })\n      })]\n    }), y(\"div\", {\n      style: l.tooltip.container,\n      children: i\n    })) : null;\n  });\nC.displayName = \"TableTooltip\";\nvar E = t(function (t) {\n  var i = t.x0,\n    n = t.x1,\n    r = t.y0,\n    e = t.y1,\n    l = h(),\n    d = s(),\n    u = d.animate,\n    p = d.config,\n    f = o(function () {\n      return v({}, l.crosshair.line, {\n        pointerEvents: \"none\"\n      });\n    }, [l.crosshair.line]),\n    x = a({\n      x1: i,\n      x2: n,\n      y1: r,\n      y2: e,\n      config: p,\n      immediate: !u\n    });\n  return y(c.line, v({}, x, {\n    fill: \"none\",\n    style: f\n  }));\n});\nE.displayName = \"CrosshairLine\";\nvar P = t(function (t) {\n  var i,\n    o,\n    n = t.width,\n    r = t.height,\n    e = t.type,\n    l = t.x,\n    a = t.y;\n  return \"cross\" === e ? (i = {\n    x0: l,\n    x1: l,\n    y0: 0,\n    y1: r\n  }, o = {\n    x0: 0,\n    x1: n,\n    y0: a,\n    y1: a\n  }) : \"top-left\" === e ? (i = {\n    x0: l,\n    x1: l,\n    y0: 0,\n    y1: a\n  }, o = {\n    x0: 0,\n    x1: l,\n    y0: a,\n    y1: a\n  }) : \"top\" === e ? i = {\n    x0: l,\n    x1: l,\n    y0: 0,\n    y1: a\n  } : \"top-right\" === e ? (i = {\n    x0: l,\n    x1: l,\n    y0: 0,\n    y1: a\n  }, o = {\n    x0: l,\n    x1: n,\n    y0: a,\n    y1: a\n  }) : \"right\" === e ? o = {\n    x0: l,\n    x1: n,\n    y0: a,\n    y1: a\n  } : \"bottom-right\" === e ? (i = {\n    x0: l,\n    x1: l,\n    y0: a,\n    y1: r\n  }, o = {\n    x0: l,\n    x1: n,\n    y0: a,\n    y1: a\n  }) : \"bottom\" === e ? i = {\n    x0: l,\n    x1: l,\n    y0: a,\n    y1: r\n  } : \"bottom-left\" === e ? (i = {\n    x0: l,\n    x1: l,\n    y0: a,\n    y1: r\n  }, o = {\n    x0: 0,\n    x1: l,\n    y0: a,\n    y1: a\n  }) : \"left\" === e ? o = {\n    x0: 0,\n    x1: l,\n    y0: a,\n    y1: a\n  } : \"x\" === e ? i = {\n    x0: l,\n    x1: l,\n    y0: 0,\n    y1: r\n  } : \"y\" === e && (o = {\n    x0: 0,\n    x1: n,\n    y0: a,\n    y1: a\n  }), p(f, {\n    children: [i && y(E, {\n      x0: i.x0,\n      x1: i.x1,\n      y0: i.y0,\n      y1: i.y1\n    }), o && y(E, {\n      x0: o.x0,\n      x1: o.x1,\n      y0: o.y0,\n      y1: o.y1\n    })]\n  });\n});\nP.displayName = \"Crosshair\";\nvar N = n({\n    showTooltipAt: function () {},\n    showTooltipFromEvent: function () {},\n    hideTooltip: function () {}\n  }),\n  V = {\n    isVisible: !1,\n    position: [null, null],\n    content: null,\n    anchor: null\n  },\n  j = n(V),\n  O = function (t) {\n    var i = r(V),\n      n = i[0],\n      l = i[1],\n      a = e(function (t, i, o) {\n        var n = i[0],\n          r = i[1];\n        void 0 === o && (o = \"top\"), l({\n          isVisible: !0,\n          position: [n, r],\n          anchor: o,\n          content: t\n        });\n      }, [l]),\n      c = e(function (i, o, n) {\n        void 0 === n && (n = \"top\");\n        var r = t.current.getBoundingClientRect(),\n          e = t.current.offsetWidth,\n          a = e === r.width ? 1 : e / r.width,\n          c = (o.clientX - r.left) * a,\n          h = (o.clientY - r.top) * a;\n        \"left\" !== n && \"right\" !== n || (n = c < r.width / 2 ? \"right\" : \"left\"), l({\n          isVisible: !0,\n          position: [c, h],\n          anchor: n,\n          content: i\n        });\n      }, [t, l]),\n      h = e(function () {\n        l(V);\n      }, [l]);\n    return {\n      actions: o(function () {\n        return {\n          showTooltipAt: a,\n          showTooltipFromEvent: c,\n          hideTooltip: h\n        };\n      }, [a, c, h]),\n      state: n\n    };\n  },\n  k = function () {\n    var t = l(N);\n    if (void 0 === t) throw new Error(\"useTooltip must be used within a TooltipProvider\");\n    return t;\n  },\n  z = function () {\n    var t = l(j);\n    if (void 0 === t) throw new Error(\"useTooltipState must be used within a TooltipProvider\");\n    return t;\n  },\n  A = function (t) {\n    return t.isVisible;\n  },\n  F = function () {\n    var t = z();\n    return A(t) ? y(g, {\n      position: t.position,\n      anchor: t.anchor,\n      children: t.content\n    }) : null;\n  },\n  M = function (t) {\n    var i = t.container,\n      o = t.children,\n      n = O(i),\n      r = n.actions,\n      e = n.state;\n    return y(N.Provider, {\n      value: r,\n      children: y(j.Provider, {\n        value: e,\n        children: o\n      })\n    });\n  };\nexport { w as BasicTooltip, b as Chip, P as Crosshair, C as TableTooltip, F as Tooltip, N as TooltipActionsContext, M as TooltipProvider, j as TooltipStateContext, g as TooltipWrapper, V as hiddenTooltipState, A as isVisibleTooltipState, k as useTooltip, O as useTooltipHandlers, z as useTooltipState };","map":{"version":3,"mappings":"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","names":["tooltipStyle","pointerEvents","position","zIndex","top","left","translate","x","y","TooltipWrapper","memo","anchor","children","theme","useTheme","useMotionConfig","animate","springConfig","config","useMeasure","measureRef","bounds","previousPosition","useRef","to","undefined","immediate","hasDimension","width","height","Math","round","transform","current","animatedProps","useSpring","style","tooltip","_jsx","animated","div","ref","displayName","Chip","size","color","display","background","BasicTooltip","content","id","_value","value","format","enableChip","renderContent","formatValue","useValueFormatter","_jsxs","basic","chip","container","tableStyle","borderCollapse","TableTooltip","title","rows","length","table","map","row","i","column","j","tableCell","CrosshairLine","x0","x1","y0","y1","useMemo","crosshair","line","x2","y2","fill","Crosshair","xLine","yLine","type","TooltipActionsContext","createContext","showTooltipAt","showTooltipFromEvent","hideTooltip","hiddenTooltipState","isVisible","TooltipStateContext","useTooltipHandlers","useState","state","setState","useCallback","event","getBoundingClientRect","offsetWidth","scaling","clientX","clientY","actions","useTooltip","context","useContext","Error","useTooltipState","isVisibleTooltipState","Tooltip","TooltipProvider","Provider"],"sources":["/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/tooltip/src/TooltipWrapper.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/tooltip/src/Chip.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/tooltip/src/BasicTooltip.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/tooltip/src/TableTooltip.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/tooltip/src/CrosshairLine.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/tooltip/src/Crosshair.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/tooltip/src/context.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/tooltip/src/hooks.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/tooltip/src/Tooltip.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/tooltip/src/TooltipProvider.tsx"],"sourcesContent":["import { memo, useRef, PropsWithChildren, CSSProperties } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport {\n    useTheme,\n    useMotionConfig,\n    // @ts-ignore\n    useMeasure,\n} from '@nivo/core'\nimport { TooltipStateContextDataVisible } from './context'\n\nconst TOOLTIP_OFFSET = 14\n\nconst tooltipStyle = {\n    pointerEvents: 'none' as CSSProperties['pointerEvents'],\n    position: 'absolute' as CSSProperties['position'],\n    zIndex: 10,\n    top: 0,\n    left: 0,\n}\n\nconst translate = (x: number, y: number) => `translate(${x}px, ${y}px)`\n\ninterface TooltipWrapperProps {\n    position: TooltipStateContextDataVisible['position']\n    anchor: TooltipStateContextDataVisible['anchor']\n}\n\nexport const TooltipWrapper = memo<PropsWithChildren<TooltipWrapperProps>>(\n    ({ position, anchor, children }) => {\n        const theme = useTheme()\n        const { animate, config: springConfig } = useMotionConfig()\n        const [measureRef, bounds] = useMeasure()\n        const previousPosition = useRef<[number, number] | false>(false)\n\n        let to = undefined\n        let immediate = false\n        const hasDimension = bounds.width > 0 && bounds.height > 0\n\n        let x = Math.round(position[0])\n        let y = Math.round(position[1])\n\n        if (hasDimension) {\n            if (anchor === 'top') {\n                x -= bounds.width / 2\n                y -= bounds.height + TOOLTIP_OFFSET\n            } else if (anchor === 'right') {\n                x += TOOLTIP_OFFSET\n                y -= bounds.height / 2\n            } else if (anchor === 'bottom') {\n                x -= bounds.width / 2\n                y += TOOLTIP_OFFSET\n            } else if (anchor === 'left') {\n                x -= bounds.width + TOOLTIP_OFFSET\n                y -= bounds.height / 2\n            } else if (anchor === 'center') {\n                x -= bounds.width / 2\n                y -= bounds.height / 2\n            }\n\n            to = {\n                transform: translate(x, y),\n            }\n\n            if (!previousPosition.current) {\n                immediate = true\n            }\n\n            previousPosition.current = [x, y]\n        }\n\n        const animatedProps = useSpring<{\n            transform: string\n        }>({\n            to,\n            config: springConfig,\n            immediate: !animate || immediate,\n        })\n\n        const style = {\n            ...tooltipStyle,\n            ...theme.tooltip,\n            transform: animatedProps.transform ?? translate(x, y),\n        }\n\n        return (\n            <animated.div ref={measureRef} style={style}>\n                {children}\n            </animated.div>\n        )\n    }\n)\n\nTooltipWrapper.displayName = 'TooltipWrapper'\n","import { CSSProperties, memo } from 'react'\n\ninterface ChipProps {\n    size?: number\n    color: string\n    style?: CSSProperties\n}\n\nexport const Chip = memo<ChipProps>(({ size = 12, color, style = {} }) => (\n    <span style={{ display: 'block', width: size, height: size, background: color, ...style }} />\n))\n","import { memo, ReactNode } from 'react'\nimport { useTheme, ValueFormat, useValueFormatter } from '@nivo/core'\nimport { Chip } from './Chip'\n\nexport interface BasicTooltipProps {\n    id: ReactNode\n    value?: number | string | Date\n    format?: ValueFormat<number | string | Date>\n    color?: string\n    enableChip?: boolean\n    /**\n     * @deprecated This should be replaced by custom tooltip components.\n     */\n    renderContent?: () => JSX.Element\n}\n\nexport const BasicTooltip = memo<BasicTooltipProps>(\n    ({ id, value: _value, format, enableChip = false, color, renderContent }) => {\n        const theme = useTheme()\n        const formatValue = useValueFormatter<number | string | Date>(format)\n\n        let content: JSX.Element\n        if (typeof renderContent === 'function') {\n            content = renderContent()\n        } else {\n            let value = _value\n            if (formatValue !== undefined && value !== undefined) {\n                value = formatValue(value)\n            }\n            content = (\n                <div style={theme.tooltip.basic}>\n                    {enableChip && <Chip color={color!} style={theme.tooltip.chip} />}\n                    {value !== undefined ? (\n                        <span>\n                            {id}: <strong>{`${value}`}</strong>\n                        </span>\n                    ) : (\n                        id\n                    )}\n                </div>\n            )\n        }\n\n        return <div style={theme.tooltip.container}>{content}</div>\n    }\n)\n","import { CSSProperties, memo, ReactNode } from 'react'\nimport { useTheme } from '@nivo/core'\n\nconst tableStyle = {\n    width: '100%',\n    borderCollapse: 'collapse' as CSSProperties['borderCollapse'],\n}\n\ninterface TableTooltipProps {\n    title?: ReactNode\n    renderContent?: () => JSX.Element\n    rows?: ReactNode[][]\n}\n\nexport const TableTooltip = memo(({ title, rows = [], renderContent }: TableTooltipProps) => {\n    const theme = useTheme()\n\n    if (!rows.length) return null\n\n    let content\n    if (typeof renderContent === 'function') {\n        content = renderContent()\n    } else {\n        content = (\n            <div>\n                {title && title}\n                <table style={{ ...tableStyle, ...theme.tooltip.table }}>\n                    <tbody>\n                        {rows.map((row, i) => (\n                            <tr key={i}>\n                                {row.map((column, j) => (\n                                    <td key={j} style={theme.tooltip.tableCell}>\n                                        {column}\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    return <div style={theme.tooltip.container}>{content}</div>\n})\n\nTableTooltip.displayName = 'TableTooltip'\n","import { CSSProperties, memo, useMemo } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\n\ninterface CrosshairLineProps {\n    x0: number\n    x1: number\n    y0: number\n    y1: number\n}\n\nexport const CrosshairLine = memo(({ x0, x1, y0, y1 }: CrosshairLineProps) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n    const style = useMemo(\n        () => ({\n            ...theme.crosshair.line,\n            pointerEvents: 'none' as CSSProperties['pointerEvents'],\n        }),\n        [theme.crosshair.line]\n    )\n\n    const animatedProps = useSpring({\n        x1: x0,\n        x2: x1,\n        y1: y0,\n        y2: y1,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return <animated.line {...animatedProps} fill=\"none\" style={style} />\n})\n\nCrosshairLine.displayName = 'CrosshairLine'\n","import { memo } from 'react'\nimport { CrosshairLine } from './CrosshairLine'\nimport { CrosshairType } from './types'\n\ninterface CrosshairProps {\n    width: number\n    height: number\n    type: CrosshairType\n    x: number\n    y: number\n}\n\nexport const Crosshair = memo(({ width, height, type, x, y }: CrosshairProps) => {\n    let xLine\n    let yLine\n    if (type === 'cross') {\n        xLine = { x0: x, x1: x, y0: 0, y1: height }\n        yLine = { x0: 0, x1: width, y0: y, y1: y }\n    } else if (type === 'top-left') {\n        xLine = { x0: x, x1: x, y0: 0, y1: y }\n        yLine = { x0: 0, x1: x, y0: y, y1: y }\n    } else if (type === 'top') {\n        xLine = { x0: x, x1: x, y0: 0, y1: y }\n    } else if (type === 'top-right') {\n        xLine = { x0: x, x1: x, y0: 0, y1: y }\n        yLine = { x0: x, x1: width, y0: y, y1: y }\n    } else if (type === 'right') {\n        yLine = { x0: x, x1: width, y0: y, y1: y }\n    } else if (type === 'bottom-right') {\n        xLine = { x0: x, x1: x, y0: y, y1: height }\n        yLine = { x0: x, x1: width, y0: y, y1: y }\n    } else if (type === 'bottom') {\n        xLine = { x0: x, x1: x, y0: y, y1: height }\n    } else if (type === 'bottom-left') {\n        xLine = { x0: x, x1: x, y0: y, y1: height }\n        yLine = { x0: 0, x1: x, y0: y, y1: y }\n    } else if (type === 'left') {\n        yLine = { x0: 0, x1: x, y0: y, y1: y }\n    } else if (type === 'x') {\n        xLine = { x0: x, x1: x, y0: 0, y1: height }\n    } else if (type === 'y') {\n        yLine = { x0: 0, x1: width, y0: y, y1: y }\n    }\n\n    return (\n        <>\n            {xLine && <CrosshairLine x0={xLine.x0} x1={xLine.x1} y0={xLine.y0} y1={xLine.y1} />}\n            {yLine && <CrosshairLine x0={yLine.x0} x1={yLine.x1} y0={yLine.y0} y1={yLine.y1} />}\n        </>\n    )\n})\n\nCrosshair.displayName = 'Crosshair'\n","import { createContext, MouseEvent } from 'react'\nimport { TooltipAnchor } from './types'\n\nexport interface TooltipActionsContextData {\n    showTooltipAt: (\n        content: JSX.Element,\n        position: [number, number],\n        anchor?: TooltipAnchor\n    ) => void\n    showTooltipFromEvent: (content: JSX.Element, event: MouseEvent, anchor?: TooltipAnchor) => void\n    hideTooltip: () => void\n}\n\nconst defaultActions: TooltipActionsContextData = {\n    showTooltipAt: () => {},\n    showTooltipFromEvent: () => {},\n    hideTooltip: () => {},\n}\n\nexport const TooltipActionsContext = createContext<TooltipActionsContextData>(defaultActions)\n\nexport interface TooltipStateContextDataVisible {\n    isVisible: true\n    position: [number, number]\n    content: JSX.Element\n    anchor: TooltipAnchor\n}\n\nexport interface TooltipStateContextDataHidden {\n    isVisible: false\n    position: [null, null]\n    content: null\n    anchor: null\n}\n\nexport type TooltipStateContextData = TooltipStateContextDataVisible | TooltipStateContextDataHidden\n\nexport const hiddenTooltipState: TooltipStateContextDataHidden = {\n    isVisible: false,\n    position: [null, null],\n    content: null,\n    anchor: null,\n}\n\nexport const TooltipStateContext = createContext<TooltipStateContextData>(hiddenTooltipState)\n","import { useState, useContext, useCallback, MutableRefObject, MouseEvent, useMemo } from 'react'\nimport {\n    TooltipActionsContext,\n    TooltipActionsContextData,\n    TooltipStateContext,\n    TooltipStateContextData,\n    hiddenTooltipState,\n} from './context'\nimport { TooltipAnchor } from './types'\n\nexport const useTooltipHandlers = (container: MutableRefObject<HTMLDivElement>) => {\n    const [state, setState] = useState<TooltipStateContextData>(hiddenTooltipState)\n\n    const showTooltipAt: TooltipActionsContextData['showTooltipAt'] = useCallback(\n        (content: JSX.Element, [x, y]: [number, number], anchor: TooltipAnchor = 'top') => {\n            setState({\n                isVisible: true,\n                position: [x, y],\n                anchor,\n                content,\n            })\n        },\n        [setState]\n    )\n\n    const showTooltipFromEvent: TooltipActionsContextData['showTooltipFromEvent'] = useCallback(\n        (content: JSX.Element, event: MouseEvent, anchor: TooltipAnchor = 'top') => {\n            const bounds = container.current.getBoundingClientRect()\n            const offsetWidth = container.current.offsetWidth\n            // In a normal situation mouse enter / mouse leave events\n            // capture the position ok. But when the chart is inside a scaled\n            // element with a CSS transform like: `transform: scale(2);`\n            // tooltip are not positioned ok.\n            // Comparing original width `offsetWidth` agains scaled\n            // width give us the scaling factor to calculate\n            // ok mouse position\n            const scaling = offsetWidth === bounds.width ? 1 : offsetWidth / bounds.width\n            const x = (event.clientX - bounds.left) * scaling\n            const y = (event.clientY - bounds.top) * scaling\n\n            if (anchor === 'left' || anchor === 'right') {\n                if (x < bounds.width / 2) anchor = 'right'\n                else anchor = 'left'\n            }\n\n            setState({\n                isVisible: true,\n                position: [x, y],\n                anchor,\n                content,\n            })\n        },\n        [container, setState]\n    )\n\n    const hideTooltip = useCallback(() => {\n        setState(hiddenTooltipState)\n    }, [setState])\n\n    const actions: TooltipActionsContextData = useMemo(() => {\n        return {\n            showTooltipAt,\n            showTooltipFromEvent,\n            hideTooltip,\n        }\n    }, [showTooltipAt, showTooltipFromEvent, hideTooltip])\n\n    return {\n        actions,\n        state,\n    }\n}\n\nexport const useTooltip = () => {\n    const context = useContext(TooltipActionsContext)\n    if (context === undefined) {\n        throw new Error('useTooltip must be used within a TooltipProvider')\n    }\n\n    return context\n}\n\nexport const useTooltipState = () => {\n    const context = useContext(TooltipStateContext)\n    if (context === undefined) {\n        throw new Error('useTooltipState must be used within a TooltipProvider')\n    }\n\n    return context\n}\n","import { useTooltipState } from './hooks'\nimport { TooltipWrapper } from './TooltipWrapper'\nimport { TooltipStateContextData, TooltipStateContextDataVisible } from './context'\n\nexport const isVisibleTooltipState = (\n    state: TooltipStateContextData\n): state is TooltipStateContextDataVisible => state.isVisible\n\nexport const Tooltip = () => {\n    const state = useTooltipState()\n\n    if (!isVisibleTooltipState(state)) {\n        return null\n    }\n\n    return (\n        <TooltipWrapper position={state.position} anchor={state.anchor}>\n            {state.content}\n        </TooltipWrapper>\n    )\n}\n","import { PropsWithChildren, MutableRefObject } from 'react'\nimport { TooltipActionsContext, TooltipStateContext } from './context'\nimport { useTooltipHandlers } from './hooks'\n\ninterface TooltipProviderProps {\n    container: MutableRefObject<HTMLDivElement>\n}\n\nexport const TooltipProvider = ({\n    container,\n    children,\n}: PropsWithChildren<TooltipProviderProps>) => {\n    const { actions, state } = useTooltipHandlers(container)\n\n    return (\n        <TooltipActionsContext.Provider value={actions}>\n            <TooltipStateContext.Provider value={state}>{children}</TooltipStateContext.Provider>\n        </TooltipActionsContext.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}