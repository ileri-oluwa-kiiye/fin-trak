{"ast":null,"code":"import * as t from \"react\";\nimport { memo as e, useMemo as i, createElement as n } from \"react\";\nimport { animated as r, useSpring as a, useTransition as o } from \"@react-spring/web\";\nimport { textPropsByEngine as l, useTheme as s, useMotionConfig as c, degreesToRadians as f } from \"@nivo/core\";\nimport { timeFormat as x } from \"d3-time-format\";\nimport { format as u } from \"d3-format\";\nimport { getScaleTicks as d, centerScale as m } from \"@nivo/scales\";\nimport { jsxs as y, jsx as g, Fragment as k } from \"react/jsx-runtime\";\nimport h from \"prop-types\";\nfunction v() {\n  return v = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var i = arguments[e];\n      for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (t[n] = i[n]);\n    }\n    return t;\n  }, v.apply(this, arguments);\n}\nvar p = function (t) {\n    var e,\n      i = t.axis,\n      n = t.scale,\n      r = t.ticksPosition,\n      a = t.tickValues,\n      o = t.tickSize,\n      s = t.tickPadding,\n      c = t.tickRotation,\n      f = t.engine,\n      x = void 0 === f ? \"svg\" : f,\n      u = d(n, a),\n      y = l[x],\n      g = \"bandwidth\" in n ? m(n) : n,\n      k = {\n        lineX: 0,\n        lineY: 0\n      },\n      h = {\n        textX: 0,\n        textY: 0\n      },\n      p = \"object\" == typeof document && \"rtl\" === document.dir,\n      b = y.align.center,\n      P = y.baseline.center;\n    return \"x\" === i ? (e = function (t) {\n      var e;\n      return {\n        x: null != (e = g(t)) ? e : 0,\n        y: 0\n      };\n    }, k.lineY = o * (\"after\" === r ? 1 : -1), h.textY = (o + s) * (\"after\" === r ? 1 : -1), P = \"after\" === r ? y.baseline.top : y.baseline.bottom, 0 === c ? b = y.align.center : \"after\" === r && c < 0 || \"before\" === r && c > 0 ? (b = y.align[p ? \"left\" : \"right\"], P = y.baseline.center) : (\"after\" === r && c > 0 || \"before\" === r && c < 0) && (b = y.align[p ? \"right\" : \"left\"], P = y.baseline.center)) : (e = function (t) {\n      var e;\n      return {\n        x: 0,\n        y: null != (e = g(t)) ? e : 0\n      };\n    }, k.lineX = o * (\"after\" === r ? 1 : -1), h.textX = (o + s) * (\"after\" === r ? 1 : -1), b = \"after\" === r ? y.align.left : y.align.right), {\n      ticks: u.map(function (t) {\n        return v({\n          key: t instanceof Date ? \"\" + t.valueOf() : \"\" + t,\n          value: t\n        }, e(t), k, h);\n      }),\n      textAlign: b,\n      textBaseline: P\n    };\n  },\n  b = function (t, e) {\n    if (void 0 === t || \"function\" == typeof t) return t;\n    if (\"time\" === e.type) {\n      var i = x(t);\n      return function (t) {\n        return i(t instanceof Date ? t : new Date(t));\n      };\n    }\n    return u(t);\n  },\n  P = function (t) {\n    var e,\n      i = t.width,\n      n = t.height,\n      r = t.scale,\n      a = t.axis,\n      o = t.values,\n      l = (e = o, Array.isArray(e) ? o : void 0) || d(r, o),\n      s = \"bandwidth\" in r ? m(r) : r,\n      c = \"x\" === a ? l.map(function (t) {\n        var e, i;\n        return {\n          key: t instanceof Date ? \"\" + t.valueOf() : \"\" + t,\n          x1: null != (e = s(t)) ? e : 0,\n          x2: null != (i = s(t)) ? i : 0,\n          y1: 0,\n          y2: n\n        };\n      }) : l.map(function (t) {\n        var e, n;\n        return {\n          key: t instanceof Date ? \"\" + t.valueOf() : \"\" + t,\n          x1: 0,\n          x2: i,\n          y1: null != (e = s(t)) ? e : 0,\n          y2: null != (n = s(t)) ? n : 0\n        };\n      });\n    return c;\n  },\n  S = e(function (t) {\n    var e,\n      n = t.value,\n      a = t.format,\n      o = t.lineX,\n      l = t.lineY,\n      c = t.onClick,\n      f = t.textBaseline,\n      x = t.textAnchor,\n      u = t.animatedProps,\n      d = s(),\n      m = null != (e = null == a ? void 0 : a(n)) ? e : n,\n      k = i(function () {\n        var t = {\n          opacity: u.opacity\n        };\n        return c ? {\n          style: v({}, t, {\n            cursor: \"pointer\"\n          }),\n          onClick: function (t) {\n            return c(t, m);\n          }\n        } : {\n          style: t\n        };\n      }, [u.opacity, c, m]);\n    return y(r.g, v({\n      transform: u.transform\n    }, k, {\n      children: [g(\"line\", {\n        x1: 0,\n        x2: o,\n        y1: 0,\n        y2: l,\n        style: d.axis.ticks.line\n      }), g(r.text, {\n        dominantBaseline: f,\n        textAnchor: x,\n        transform: u.textTransform,\n        style: d.axis.ticks.text,\n        children: m\n      })]\n    }));\n  }),\n  T = e(function (e) {\n    var n = e.axis,\n      l = e.scale,\n      f = e.x,\n      x = void 0 === f ? 0 : f,\n      u = e.y,\n      d = void 0 === u ? 0 : u,\n      m = e.length,\n      k = e.ticksPosition,\n      h = e.tickValues,\n      P = e.tickSize,\n      T = void 0 === P ? 5 : P,\n      O = e.tickPadding,\n      w = void 0 === O ? 5 : O,\n      A = e.tickRotation,\n      X = void 0 === A ? 0 : A,\n      Y = e.format,\n      W = e.renderTick,\n      B = void 0 === W ? S : W,\n      z = e.legend,\n      V = e.legendPosition,\n      C = void 0 === V ? \"end\" : V,\n      D = e.legendOffset,\n      R = void 0 === D ? 0 : D,\n      j = e.onClick,\n      E = e.ariaHidden,\n      q = s(),\n      F = i(function () {\n        return b(Y, l);\n      }, [Y, l]),\n      H = p({\n        axis: n,\n        scale: l,\n        ticksPosition: k,\n        tickValues: h,\n        tickSize: T,\n        tickPadding: w,\n        tickRotation: X\n      }),\n      N = H.ticks,\n      I = H.textAlign,\n      G = H.textBaseline,\n      J = null;\n    if (void 0 !== z) {\n      var K,\n        L = 0,\n        M = 0,\n        Q = 0;\n      \"y\" === n ? (Q = -90, L = R, \"start\" === C ? (K = \"start\", M = m) : \"middle\" === C ? (K = \"middle\", M = m / 2) : \"end\" === C && (K = \"end\")) : (M = R, \"start\" === C ? K = \"start\" : \"middle\" === C ? (K = \"middle\", L = m / 2) : \"end\" === C && (K = \"end\", L = m)), J = g(\"text\", {\n        transform: \"translate(\" + L + \", \" + M + \") rotate(\" + Q + \")\",\n        textAnchor: K,\n        style: v({\n          dominantBaseline: \"central\"\n        }, q.axis.legend.text),\n        children: z\n      });\n    }\n    var U = c(),\n      Z = U.animate,\n      $ = U.config,\n      _ = a({\n        transform: \"translate(\" + x + \",\" + d + \")\",\n        lineX2: \"x\" === n ? m : 0,\n        lineY2: \"x\" === n ? 0 : m,\n        config: $,\n        immediate: !Z\n      }),\n      tt = o(N, {\n        keys: function (t) {\n          return t.key;\n        },\n        initial: function (t) {\n          return {\n            opacity: 1,\n            transform: \"translate(\" + t.x + \",\" + t.y + \")\",\n            textTransform: \"translate(\" + t.textX + \",\" + t.textY + \") rotate(\" + X + \")\"\n          };\n        },\n        from: function (t) {\n          return {\n            opacity: 0,\n            transform: \"translate(\" + t.x + \",\" + t.y + \")\",\n            textTransform: \"translate(\" + t.textX + \",\" + t.textY + \") rotate(\" + X + \")\"\n          };\n        },\n        enter: function (t) {\n          return {\n            opacity: 1,\n            transform: \"translate(\" + t.x + \",\" + t.y + \")\",\n            textTransform: \"translate(\" + t.textX + \",\" + t.textY + \") rotate(\" + X + \")\"\n          };\n        },\n        update: function (t) {\n          return {\n            opacity: 1,\n            transform: \"translate(\" + t.x + \",\" + t.y + \")\",\n            textTransform: \"translate(\" + t.textX + \",\" + t.textY + \") rotate(\" + X + \")\"\n          };\n        },\n        leave: {\n          opacity: 0\n        },\n        config: $,\n        immediate: !Z\n      });\n    return y(r.g, {\n      transform: _.transform,\n      \"aria-hidden\": E,\n      children: [tt(function (e, i, n, r) {\n        return t.createElement(B, v({\n          tickIndex: r,\n          format: F,\n          rotate: X,\n          textBaseline: G,\n          textAnchor: I,\n          animatedProps: e\n        }, i, j ? {\n          onClick: j\n        } : {}));\n      }), g(r.line, {\n        style: q.axis.domain.line,\n        x1: 0,\n        x2: _.lineX2,\n        y1: 0,\n        y2: _.lineY2\n      }), J]\n    });\n  }),\n  O = {\n    ticksPosition: h.oneOf([\"before\", \"after\"]),\n    tickValues: h.oneOfType([h.number, h.arrayOf(h.oneOfType([h.number, h.string, h.instanceOf(Date)])), h.string]),\n    tickSize: h.number,\n    tickPadding: h.number,\n    tickRotation: h.number,\n    format: h.oneOfType([h.func, h.string]),\n    renderTick: h.func,\n    legend: h.node,\n    legendPosition: h.oneOf([\"start\", \"middle\", \"end\"]),\n    legendOffset: h.number,\n    ariaHidden: h.bool\n  },\n  w = h.shape(O),\n  A = [\"top\", \"right\", \"bottom\", \"left\"],\n  X = e(function (t) {\n    var e = t.xScale,\n      i = t.yScale,\n      n = t.width,\n      r = t.height,\n      a = {\n        top: t.top,\n        right: t.right,\n        bottom: t.bottom,\n        left: t.left\n      };\n    return g(k, {\n      children: A.map(function (t) {\n        var o = a[t];\n        if (!o) return null;\n        var l = \"top\" === t || \"bottom\" === t;\n        return g(T, v({}, o, {\n          axis: l ? \"x\" : \"y\",\n          x: \"right\" === t ? n : 0,\n          y: \"bottom\" === t ? r : 0,\n          scale: l ? e : i,\n          length: l ? n : r,\n          ticksPosition: \"top\" === t || \"left\" === t ? \"before\" : \"after\"\n        }), t);\n      })\n    });\n  }),\n  Y = e(function (t) {\n    var e = t.animatedProps,\n      i = s();\n    return g(r.line, v({}, e, i.grid.line));\n  }),\n  W = e(function (t) {\n    var e = t.lines,\n      i = c(),\n      r = i.animate,\n      a = i.config,\n      l = o(e, {\n        keys: function (t) {\n          return t.key;\n        },\n        initial: function (t) {\n          return {\n            opacity: 1,\n            x1: t.x1,\n            x2: t.x2,\n            y1: t.y1,\n            y2: t.y2\n          };\n        },\n        from: function (t) {\n          return {\n            opacity: 0,\n            x1: t.x1,\n            x2: t.x2,\n            y1: t.y1,\n            y2: t.y2\n          };\n        },\n        enter: function (t) {\n          return {\n            opacity: 1,\n            x1: t.x1,\n            x2: t.x2,\n            y1: t.y1,\n            y2: t.y2\n          };\n        },\n        update: function (t) {\n          return {\n            opacity: 1,\n            x1: t.x1,\n            x2: t.x2,\n            y1: t.y1,\n            y2: t.y2\n          };\n        },\n        leave: {\n          opacity: 0\n        },\n        config: a,\n        immediate: !r\n      });\n    return g(\"g\", {\n      children: l(function (t, e) {\n        return n(Y, v({}, e, {\n          key: e.key,\n          animatedProps: t\n        }));\n      })\n    });\n  }),\n  B = e(function (t) {\n    var e = t.width,\n      n = t.height,\n      r = t.xScale,\n      a = t.yScale,\n      o = t.xValues,\n      l = t.yValues,\n      s = i(function () {\n        return !!r && P({\n          width: e,\n          height: n,\n          scale: r,\n          axis: \"x\",\n          values: o\n        });\n      }, [r, o, e, n]),\n      c = i(function () {\n        return !!a && P({\n          width: e,\n          height: n,\n          scale: a,\n          axis: \"y\",\n          values: l\n        });\n      }, [n, e, a, l]);\n    return y(k, {\n      children: [s && g(W, {\n        lines: s\n      }), c && g(W, {\n        lines: c\n      })]\n    });\n  }),\n  z = function (t, e) {\n    var i,\n      n = e.axis,\n      r = e.scale,\n      a = e.x,\n      o = void 0 === a ? 0 : a,\n      l = e.y,\n      s = void 0 === l ? 0 : l,\n      c = e.length,\n      x = e.ticksPosition,\n      u = e.tickValues,\n      d = e.tickSize,\n      m = void 0 === d ? 5 : d,\n      y = e.tickPadding,\n      g = void 0 === y ? 5 : y,\n      k = e.tickRotation,\n      h = void 0 === k ? 0 : k,\n      v = e.format,\n      b = e.legend,\n      P = e.legendPosition,\n      S = void 0 === P ? \"end\" : P,\n      T = e.legendOffset,\n      O = void 0 === T ? 0 : T,\n      w = e.theme,\n      A = p({\n        axis: n,\n        scale: r,\n        ticksPosition: x,\n        tickValues: u,\n        tickSize: m,\n        tickPadding: g,\n        tickRotation: h,\n        engine: \"canvas\"\n      }),\n      X = A.ticks,\n      Y = A.textAlign,\n      W = A.textBaseline;\n    t.save(), t.translate(o, s), t.textAlign = Y, t.textBaseline = W, t.font = (w.axis.ticks.text.fontWeight ? w.axis.ticks.text.fontWeight + \" \" : \"\") + w.axis.ticks.text.fontSize + \"px \" + w.axis.ticks.text.fontFamily, (null != (i = w.axis.domain.line.strokeWidth) ? i : 0) > 0 && (t.lineWidth = Number(w.axis.domain.line.strokeWidth), t.lineCap = \"square\", w.axis.domain.line.stroke && (t.strokeStyle = w.axis.domain.line.stroke), t.beginPath(), t.moveTo(0, 0), t.lineTo(\"x\" === n ? c : 0, \"x\" === n ? 0 : c), t.stroke());\n    var B = \"function\" == typeof v ? v : function (t) {\n      return \"\" + t;\n    };\n    if (X.forEach(function (e) {\n      var i;\n      (null != (i = w.axis.ticks.line.strokeWidth) ? i : 0) > 0 && (t.lineWidth = Number(w.axis.ticks.line.strokeWidth), t.lineCap = \"square\", w.axis.ticks.line.stroke && (t.strokeStyle = w.axis.ticks.line.stroke), t.beginPath(), t.moveTo(e.x, e.y), t.lineTo(e.x + e.lineX, e.y + e.lineY), t.stroke());\n      var n = B(e.value);\n      t.save(), t.translate(e.x + e.textX, e.y + e.textY), t.rotate(f(h)), w.axis.ticks.text.fill && (t.fillStyle = w.axis.ticks.text.fill), t.fillText(String(n), 0, 0), t.restore();\n    }), void 0 !== b) {\n      var z = 0,\n        V = 0,\n        C = 0,\n        D = \"center\";\n      \"y\" === n ? (C = -90, z = O, \"start\" === S ? (D = \"start\", V = c) : \"middle\" === S ? (D = \"center\", V = c / 2) : \"end\" === S && (D = \"end\")) : (V = O, \"start\" === S ? D = \"start\" : \"middle\" === S ? (D = \"center\", z = c / 2) : \"end\" === S && (D = \"end\", z = c)), t.translate(z, V), t.rotate(f(C)), t.font = (w.axis.legend.text.fontWeight ? w.axis.legend.text.fontWeight + \" \" : \"\") + w.axis.legend.text.fontSize + \"px \" + w.axis.legend.text.fontFamily, w.axis.legend.text.fill && (t.fillStyle = w.axis.legend.text.fill), t.textAlign = D, t.textBaseline = \"middle\", t.fillText(b, 0, 0);\n    }\n    t.restore();\n  },\n  V = function (t, e) {\n    var i = e.xScale,\n      n = e.yScale,\n      r = e.width,\n      a = e.height,\n      o = e.top,\n      l = e.right,\n      s = e.bottom,\n      c = e.left,\n      f = e.theme,\n      x = {\n        top: o,\n        right: l,\n        bottom: s,\n        left: c\n      };\n    A.forEach(function (e) {\n      var o = x[e];\n      if (!o) return null;\n      var l = \"top\" === e || \"bottom\" === e,\n        s = \"top\" === e || \"left\" === e ? \"before\" : \"after\",\n        c = l ? i : n,\n        u = b(o.format, c);\n      z(t, v({}, o, {\n        axis: l ? \"x\" : \"y\",\n        x: \"right\" === e ? r : 0,\n        y: \"bottom\" === e ? a : 0,\n        scale: c,\n        format: u,\n        length: l ? r : a,\n        ticksPosition: s,\n        theme: f\n      }));\n    });\n  },\n  C = function (t, e) {\n    var i = e.width,\n      n = e.height,\n      r = e.scale,\n      a = e.axis,\n      o = e.values;\n    P({\n      width: i,\n      height: n,\n      scale: r,\n      axis: a,\n      values: o\n    }).forEach(function (e) {\n      t.beginPath(), t.moveTo(e.x1, e.y1), t.lineTo(e.x2, e.y2), t.stroke();\n    });\n  };\nexport { X as Axes, T as Axis, S as AxisTick, B as Grid, Y as GridLine, W as GridLines, w as axisPropType, O as axisPropTypes, A as positions, V as renderAxesToCanvas, z as renderAxisToCanvas, C as renderGridLinesToCanvas };","map":{"version":3,"mappings":"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","names":["computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","d","x","y","top","bottom","left","right","ticks","map","value","key","Date","valueOf","getFormatter","format","type","formatter","timeFormat","d3Format","computeGridLines","width","height","_values","Array","isArray","undefined","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","onClick","textAnchor","animatedProps","theme","useTheme","props","useMemo","style","opacity","cursor","event","_jsxs","animated","g","transform","_jsx","dominantBaseline","textTransform","memoizedAxis","u","length","O","A","renderTick","AxisTick","legend","legendPosition","D","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","keys","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","createElement","rotate","domain","axisPropTypes","PropTypes","oneOf","oneOfType","number","arrayOf","string","instanceOf","func","node","bool","axisPropType","shape","positions","Axes","xScale","yScale","axes","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","l","k","_format","T","save","font","fontWeight","fontSize","fontFamily","strokeWidth","lineWidth","Number","lineCap","stroke","strokeStyle","beginPath","moveTo","lineTo","forEach","degreesToRadians","fill","fillStyle","fillText","String","restore","renderAxesToCanvas","renderGridLinesToCanvas"],"sources":["/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/axes/src/compute.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/axes/src/components/AxisTick.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/axes/src/components/Axis.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/axes/src/props.ts","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/axes/src/components/Axes.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/axes/src/components/GridLine.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/axes/src/components/GridLines.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/axes/src/components/Grid.tsx","/Users/ilerioluwakiiye/Desktop/Dev/fin-trakaa/node_modules/@nivo/axes/src/canvas.ts"],"sourcesContent":["import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map((value: Value) => ({\n        key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProps, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProps<X> | null\n        right?: CanvasAxisProps<Y> | null\n        bottom?: CanvasAxisProps<X> | null\n        left?: CanvasAxisProps<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProps<X> | undefined\n            : CanvasAxisProps<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}